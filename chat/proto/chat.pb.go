// Code generated by protoc-gen-go. DO NOT EDIT.
// source: chat.proto

package chat

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Status int32

const (
	Status_NO       Status = 0
	Status_OBSERVER Status = 1
	Status_PLAYER   Status = 2
	Status_ADMIN    Status = 3
)

var Status_name = map[int32]string{
	0: "NO",
	1: "OBSERVER",
	2: "PLAYER",
	3: "ADMIN",
}

var Status_value = map[string]int32{
	"NO":       0,
	"OBSERVER": 1,
	"PLAYER":   2,
	"ADMIN":    3,
}

func (x Status) String() string {
	return proto.EnumName(Status_name, int32(x))
}

func (Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_8c585a45e2093e54, []int{0}
}

type ChatType int32

const (
	ChatType_LOBBY ChatType = 0
	ChatType_ROOM  ChatType = 1
	ChatType_USER  ChatType = 3
)

var ChatType_name = map[int32]string{
	0: "LOBBY",
	1: "ROOM",
	3: "USER",
}

var ChatType_value = map[string]int32{
	"LOBBY": 0,
	"ROOM":  1,
	"USER":  3,
}

func (x ChatType) String() string {
	return proto.EnumName(ChatType_name, int32(x))
}

func (ChatType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_8c585a45e2093e54, []int{1}
}

type ChatID struct {
	Value                int32    `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ChatID) Reset()         { *m = ChatID{} }
func (m *ChatID) String() string { return proto.CompactTextString(m) }
func (*ChatID) ProtoMessage()    {}
func (*ChatID) Descriptor() ([]byte, []int) {
	return fileDescriptor_8c585a45e2093e54, []int{0}
}

func (m *ChatID) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChatID.Unmarshal(m, b)
}
func (m *ChatID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChatID.Marshal(b, m, deterministic)
}
func (m *ChatID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChatID.Merge(m, src)
}
func (m *ChatID) XXX_Size() int {
	return xxx_messageInfo_ChatID.Size(m)
}
func (m *ChatID) XXX_DiscardUnknown() {
	xxx_messageInfo_ChatID.DiscardUnknown(m)
}

var xxx_messageInfo_ChatID proto.InternalMessageInfo

func (m *ChatID) GetValue() int32 {
	if m != nil {
		return m.Value
	}
	return 0
}

type MessageID struct {
	Value                int32    `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MessageID) Reset()         { *m = MessageID{} }
func (m *MessageID) String() string { return proto.CompactTextString(m) }
func (*MessageID) ProtoMessage()    {}
func (*MessageID) Descriptor() ([]byte, []int) {
	return fileDescriptor_8c585a45e2093e54, []int{1}
}

func (m *MessageID) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MessageID.Unmarshal(m, b)
}
func (m *MessageID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MessageID.Marshal(b, m, deterministic)
}
func (m *MessageID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MessageID.Merge(m, src)
}
func (m *MessageID) XXX_Size() int {
	return xxx_messageInfo_MessageID.Size(m)
}
func (m *MessageID) XXX_DiscardUnknown() {
	xxx_messageInfo_MessageID.DiscardUnknown(m)
}

var xxx_messageInfo_MessageID proto.InternalMessageInfo

func (m *MessageID) GetValue() int32 {
	if m != nil {
		return m.Value
	}
	return 0
}

type MessagesID struct {
	Values               []int32  `protobuf:"varint,1,rep,packed,name=values,proto3" json:"values,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MessagesID) Reset()         { *m = MessagesID{} }
func (m *MessagesID) String() string { return proto.CompactTextString(m) }
func (*MessagesID) ProtoMessage()    {}
func (*MessagesID) Descriptor() ([]byte, []int) {
	return fileDescriptor_8c585a45e2093e54, []int{2}
}

func (m *MessagesID) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MessagesID.Unmarshal(m, b)
}
func (m *MessagesID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MessagesID.Marshal(b, m, deterministic)
}
func (m *MessagesID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MessagesID.Merge(m, src)
}
func (m *MessagesID) XXX_Size() int {
	return xxx_messageInfo_MessagesID.Size(m)
}
func (m *MessagesID) XXX_DiscardUnknown() {
	xxx_messageInfo_MessagesID.DiscardUnknown(m)
}

var xxx_messageInfo_MessagesID proto.InternalMessageInfo

func (m *MessagesID) GetValues() []int32 {
	if m != nil {
		return m.Values
	}
	return nil
}

type Result struct {
	Done                 bool     `protobuf:"varint,1,opt,name=done,proto3" json:"done,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Result) Reset()         { *m = Result{} }
func (m *Result) String() string { return proto.CompactTextString(m) }
func (*Result) ProtoMessage()    {}
func (*Result) Descriptor() ([]byte, []int) {
	return fileDescriptor_8c585a45e2093e54, []int{3}
}

func (m *Result) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Result.Unmarshal(m, b)
}
func (m *Result) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Result.Marshal(b, m, deterministic)
}
func (m *Result) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Result.Merge(m, src)
}
func (m *Result) XXX_Size() int {
	return xxx_messageInfo_Result.Size(m)
}
func (m *Result) XXX_DiscardUnknown() {
	xxx_messageInfo_Result.DiscardUnknown(m)
}

var xxx_messageInfo_Result proto.InternalMessageInfo

func (m *Result) GetDone() bool {
	if m != nil {
		return m.Done
	}
	return false
}

type User struct {
	Id                   int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Photo                string   `protobuf:"bytes,3,opt,name=photo,proto3" json:"photo,omitempty"`
	Status               Status   `protobuf:"varint,4,opt,name=status,proto3,enum=chat.Status" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *User) Reset()         { *m = User{} }
func (m *User) String() string { return proto.CompactTextString(m) }
func (*User) ProtoMessage()    {}
func (*User) Descriptor() ([]byte, []int) {
	return fileDescriptor_8c585a45e2093e54, []int{4}
}

func (m *User) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_User.Unmarshal(m, b)
}
func (m *User) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_User.Marshal(b, m, deterministic)
}
func (m *User) XXX_Merge(src proto.Message) {
	xxx_messageInfo_User.Merge(m, src)
}
func (m *User) XXX_Size() int {
	return xxx_messageInfo_User.Size(m)
}
func (m *User) XXX_DiscardUnknown() {
	xxx_messageInfo_User.DiscardUnknown(m)
}

var xxx_messageInfo_User proto.InternalMessageInfo

func (m *User) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *User) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *User) GetPhoto() string {
	if m != nil {
		return m.Photo
	}
	return ""
}

func (m *User) GetStatus() Status {
	if m != nil {
		return m.Status
	}
	return Status_NO
}

type Message struct {
	Id                   int32                `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Answer               *Message             `protobuf:"bytes,2,opt,name=answer,proto3" json:"answer,omitempty"`
	Text                 string               `protobuf:"bytes,3,opt,name=text,proto3" json:"text,omitempty"`
	From                 *User                `protobuf:"bytes,4,opt,name=from,proto3" json:"from,omitempty"`
	To                   *User                `protobuf:"bytes,5,opt,name=to,proto3" json:"to,omitempty"`
	ChatId               int32                `protobuf:"varint,6,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	Time                 *timestamp.Timestamp `protobuf:"bytes,7,opt,name=time,proto3" json:"time,omitempty"`
	Edited               bool                 `protobuf:"varint,8,opt,name=edited,proto3" json:"edited,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *Message) Reset()         { *m = Message{} }
func (m *Message) String() string { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()    {}
func (*Message) Descriptor() ([]byte, []int) {
	return fileDescriptor_8c585a45e2093e54, []int{5}
}

func (m *Message) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Message.Unmarshal(m, b)
}
func (m *Message) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Message.Marshal(b, m, deterministic)
}
func (m *Message) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Message.Merge(m, src)
}
func (m *Message) XXX_Size() int {
	return xxx_messageInfo_Message.Size(m)
}
func (m *Message) XXX_DiscardUnknown() {
	xxx_messageInfo_Message.DiscardUnknown(m)
}

var xxx_messageInfo_Message proto.InternalMessageInfo

func (m *Message) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Message) GetAnswer() *Message {
	if m != nil {
		return m.Answer
	}
	return nil
}

func (m *Message) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *Message) GetFrom() *User {
	if m != nil {
		return m.From
	}
	return nil
}

func (m *Message) GetTo() *User {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *Message) GetChatId() int32 {
	if m != nil {
		return m.ChatId
	}
	return 0
}

func (m *Message) GetTime() *timestamp.Timestamp {
	if m != nil {
		return m.Time
	}
	return nil
}

func (m *Message) GetEdited() bool {
	if m != nil {
		return m.Edited
	}
	return false
}

type Messages struct {
	Messages             []*Message `protobuf:"bytes,1,rep,name=messages,proto3" json:"messages,omitempty"`
	BlockSize            int32      `protobuf:"varint,2,opt,name=block_size,json=blockSize,proto3" json:"block_size,omitempty"`
	BlockAmount          int32      `protobuf:"varint,3,opt,name=block_amount,json=blockAmount,proto3" json:"block_amount,omitempty"`
	BlockNumber          int32      `protobuf:"varint,4,opt,name=block_number,json=blockNumber,proto3" json:"block_number,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *Messages) Reset()         { *m = Messages{} }
func (m *Messages) String() string { return proto.CompactTextString(m) }
func (*Messages) ProtoMessage()    {}
func (*Messages) Descriptor() ([]byte, []int) {
	return fileDescriptor_8c585a45e2093e54, []int{6}
}

func (m *Messages) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Messages.Unmarshal(m, b)
}
func (m *Messages) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Messages.Marshal(b, m, deterministic)
}
func (m *Messages) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Messages.Merge(m, src)
}
func (m *Messages) XXX_Size() int {
	return xxx_messageInfo_Messages.Size(m)
}
func (m *Messages) XXX_DiscardUnknown() {
	xxx_messageInfo_Messages.DiscardUnknown(m)
}

var xxx_messageInfo_Messages proto.InternalMessageInfo

func (m *Messages) GetMessages() []*Message {
	if m != nil {
		return m.Messages
	}
	return nil
}

func (m *Messages) GetBlockSize() int32 {
	if m != nil {
		return m.BlockSize
	}
	return 0
}

func (m *Messages) GetBlockAmount() int32 {
	if m != nil {
		return m.BlockAmount
	}
	return 0
}

func (m *Messages) GetBlockNumber() int32 {
	if m != nil {
		return m.BlockNumber
	}
	return 0
}

type Chat struct {
	Id                   int32       `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Type                 ChatType    `protobuf:"varint,2,opt,name=type,proto3,enum=chat.ChatType" json:"type,omitempty"`
	TypeId               int32       `protobuf:"varint,3,opt,name=type_id,json=typeId,proto3" json:"type_id,omitempty"`
	Messages             []*Messages `protobuf:"bytes,4,rep,name=messages,proto3" json:"messages,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *Chat) Reset()         { *m = Chat{} }
func (m *Chat) String() string { return proto.CompactTextString(m) }
func (*Chat) ProtoMessage()    {}
func (*Chat) Descriptor() ([]byte, []int) {
	return fileDescriptor_8c585a45e2093e54, []int{7}
}

func (m *Chat) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Chat.Unmarshal(m, b)
}
func (m *Chat) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Chat.Marshal(b, m, deterministic)
}
func (m *Chat) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Chat.Merge(m, src)
}
func (m *Chat) XXX_Size() int {
	return xxx_messageInfo_Chat.Size(m)
}
func (m *Chat) XXX_DiscardUnknown() {
	xxx_messageInfo_Chat.DiscardUnknown(m)
}

var xxx_messageInfo_Chat proto.InternalMessageInfo

func (m *Chat) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Chat) GetType() ChatType {
	if m != nil {
		return m.Type
	}
	return ChatType_LOBBY
}

func (m *Chat) GetTypeId() int32 {
	if m != nil {
		return m.TypeId
	}
	return 0
}

func (m *Chat) GetMessages() []*Messages {
	if m != nil {
		return m.Messages
	}
	return nil
}

type ChatWithUsers struct {
	Type                 ChatType `protobuf:"varint,1,opt,name=type,proto3,enum=chat.ChatType" json:"type,omitempty"`
	TypeId               int32    `protobuf:"varint,2,opt,name=type_id,json=typeId,proto3" json:"type_id,omitempty"`
	Users                []*User  `protobuf:"bytes,3,rep,name=users,proto3" json:"users,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ChatWithUsers) Reset()         { *m = ChatWithUsers{} }
func (m *ChatWithUsers) String() string { return proto.CompactTextString(m) }
func (*ChatWithUsers) ProtoMessage()    {}
func (*ChatWithUsers) Descriptor() ([]byte, []int) {
	return fileDescriptor_8c585a45e2093e54, []int{8}
}

func (m *ChatWithUsers) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChatWithUsers.Unmarshal(m, b)
}
func (m *ChatWithUsers) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChatWithUsers.Marshal(b, m, deterministic)
}
func (m *ChatWithUsers) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChatWithUsers.Merge(m, src)
}
func (m *ChatWithUsers) XXX_Size() int {
	return xxx_messageInfo_ChatWithUsers.Size(m)
}
func (m *ChatWithUsers) XXX_DiscardUnknown() {
	xxx_messageInfo_ChatWithUsers.DiscardUnknown(m)
}

var xxx_messageInfo_ChatWithUsers proto.InternalMessageInfo

func (m *ChatWithUsers) GetType() ChatType {
	if m != nil {
		return m.Type
	}
	return ChatType_LOBBY
}

func (m *ChatWithUsers) GetTypeId() int32 {
	if m != nil {
		return m.TypeId
	}
	return 0
}

func (m *ChatWithUsers) GetUsers() []*User {
	if m != nil {
		return m.Users
	}
	return nil
}

type UserInGroup struct {
	User                 *User    `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	Chat                 *Chat    `protobuf:"bytes,2,opt,name=chat,proto3" json:"chat,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UserInGroup) Reset()         { *m = UserInGroup{} }
func (m *UserInGroup) String() string { return proto.CompactTextString(m) }
func (*UserInGroup) ProtoMessage()    {}
func (*UserInGroup) Descriptor() ([]byte, []int) {
	return fileDescriptor_8c585a45e2093e54, []int{9}
}

func (m *UserInGroup) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserInGroup.Unmarshal(m, b)
}
func (m *UserInGroup) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserInGroup.Marshal(b, m, deterministic)
}
func (m *UserInGroup) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserInGroup.Merge(m, src)
}
func (m *UserInGroup) XXX_Size() int {
	return xxx_messageInfo_UserInGroup.Size(m)
}
func (m *UserInGroup) XXX_DiscardUnknown() {
	xxx_messageInfo_UserInGroup.DiscardUnknown(m)
}

var xxx_messageInfo_UserInGroup proto.InternalMessageInfo

func (m *UserInGroup) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *UserInGroup) GetChat() *Chat {
	if m != nil {
		return m.Chat
	}
	return nil
}

func init() {
	proto.RegisterEnum("chat.Status", Status_name, Status_value)
	proto.RegisterEnum("chat.ChatType", ChatType_name, ChatType_value)
	proto.RegisterType((*ChatID)(nil), "chat.ChatID")
	proto.RegisterType((*MessageID)(nil), "chat.MessageID")
	proto.RegisterType((*MessagesID)(nil), "chat.MessagesID")
	proto.RegisterType((*Result)(nil), "chat.Result")
	proto.RegisterType((*User)(nil), "chat.User")
	proto.RegisterType((*Message)(nil), "chat.Message")
	proto.RegisterType((*Messages)(nil), "chat.Messages")
	proto.RegisterType((*Chat)(nil), "chat.Chat")
	proto.RegisterType((*ChatWithUsers)(nil), "chat.ChatWithUsers")
	proto.RegisterType((*UserInGroup)(nil), "chat.UserInGroup")
}

func init() { proto.RegisterFile("chat.proto", fileDescriptor_8c585a45e2093e54) }

var fileDescriptor_8c585a45e2093e54 = []byte{
	// 755 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x54, 0xcf, 0x6e, 0xfa, 0x46,
	0x10, 0xc6, 0xc6, 0x36, 0x30, 0xfc, 0xf9, 0xb9, 0xdb, 0xaa, 0xb5, 0x50, 0x1b, 0x11, 0x2b, 0x91,
	0x48, 0x0e, 0x46, 0xd0, 0xf6, 0xd4, 0x13, 0x09, 0x28, 0xb2, 0x14, 0x42, 0xb5, 0x24, 0xad, 0x72,
	0x8a, 0x0c, 0xde, 0x80, 0x55, 0xec, 0xb5, 0xec, 0x35, 0x6d, 0x72, 0xe9, 0x7b, 0xf4, 0x81, 0xfa,
	0x3e, 0x7d, 0x83, 0x6a, 0xc7, 0x06, 0x42, 0x50, 0xa4, 0x9c, 0x3c, 0xf3, 0xcd, 0xb7, 0xf3, 0xe7,
	0x9b, 0x91, 0x01, 0x16, 0x2b, 0x4f, 0x38, 0x71, 0xc2, 0x05, 0x27, 0x9a, 0xb4, 0xdb, 0xbf, 0x2c,
	0x03, 0xb1, 0xca, 0xe6, 0xce, 0x82, 0x87, 0xbd, 0x25, 0x5f, 0x7b, 0xd1, 0xb2, 0x87, 0xe1, 0x79,
	0xf6, 0xdc, 0x8b, 0xc5, 0x4b, 0xcc, 0xd2, 0x9e, 0x08, 0x42, 0x96, 0x0a, 0x2f, 0x8c, 0xf7, 0x56,
	0x9e, 0xc2, 0x3e, 0x01, 0xe3, 0x7a, 0xe5, 0x09, 0x77, 0x44, 0xbe, 0x01, 0x7d, 0xe3, 0xad, 0x33,
	0x66, 0x29, 0x1d, 0xa5, 0xab, 0xd3, 0xdc, 0xb1, 0x4f, 0xa1, 0x36, 0x61, 0x69, 0xea, 0x2d, 0xd9,
	0x87, 0x94, 0x33, 0x80, 0x82, 0x92, 0xba, 0x23, 0xf2, 0x2d, 0x18, 0x08, 0xa7, 0x96, 0xd2, 0x29,
	0x77, 0x75, 0x5a, 0x78, 0xf6, 0xf7, 0x60, 0x50, 0x96, 0x66, 0x6b, 0x41, 0x08, 0x68, 0x3e, 0x8f,
	0xf2, 0x24, 0x55, 0x8a, 0xb6, 0xfd, 0x0c, 0xda, 0x43, 0xca, 0x12, 0xd2, 0x02, 0x35, 0xf0, 0x8b,
	0xf4, 0x6a, 0xe0, 0x4b, 0x6e, 0xe4, 0x85, 0xcc, 0x52, 0x3b, 0x4a, 0xb7, 0x46, 0xd1, 0x96, 0x5d,
	0xc4, 0x2b, 0x2e, 0xb8, 0x55, 0x46, 0x30, 0x77, 0xc8, 0x19, 0x18, 0xa9, 0xf0, 0x44, 0x96, 0x5a,
	0x5a, 0x47, 0xe9, 0xb6, 0x06, 0x0d, 0x07, 0x85, 0x9a, 0x21, 0x46, 0x8b, 0x98, 0xfd, 0x9f, 0x02,
	0x95, 0xa2, 0xd9, 0xa3, 0x5a, 0xe7, 0x60, 0x78, 0x51, 0xfa, 0x27, 0x4b, 0xb0, 0x5a, 0x7d, 0xd0,
	0xcc, 0x33, 0x14, 0x74, 0x5a, 0x04, 0x65, 0x4b, 0x82, 0xfd, 0x25, 0x8a, 0xea, 0x68, 0x93, 0x13,
	0xd0, 0x9e, 0x13, 0x1e, 0x62, 0xe9, 0xfa, 0x00, 0xf2, 0x87, 0x72, 0x20, 0x8a, 0x38, 0x69, 0x83,
	0x2a, 0xb8, 0xa5, 0x1f, 0x45, 0x55, 0xc1, 0xc9, 0x77, 0x50, 0x91, 0xc0, 0x53, 0xe0, 0x5b, 0x06,
	0xf6, 0x62, 0x48, 0xd7, 0xf5, 0x89, 0x03, 0x9a, 0xdc, 0x96, 0x55, 0xc1, 0x67, 0x6d, 0x67, 0xc9,
	0xf9, 0x72, 0xcd, 0x9c, 0xed, 0x6e, 0x9d, 0xfb, 0xed, 0x2a, 0x29, 0xf2, 0xa4, 0xf2, 0xcc, 0x0f,
	0x04, 0xf3, 0xad, 0x2a, 0x2a, 0x5b, 0x78, 0xf6, 0x3f, 0x0a, 0x54, 0xb7, 0x0b, 0x22, 0x17, 0x50,
	0x0d, 0x0b, 0x1b, 0x17, 0x74, 0x34, 0xe6, 0x2e, 0x4c, 0x7e, 0x00, 0x98, 0xaf, 0xf9, 0xe2, 0x8f,
	0xa7, 0x34, 0x78, 0xcd, 0x37, 0xa0, 0xd3, 0x1a, 0x22, 0xb3, 0xe0, 0x95, 0x91, 0x53, 0x68, 0xe4,
	0x61, 0x2f, 0xe4, 0x59, 0x94, 0xeb, 0xa1, 0xd3, 0x3a, 0x62, 0x43, 0x84, 0xf6, 0x94, 0x28, 0x0b,
	0xe7, 0x2c, 0x41, 0x79, 0xb6, 0x94, 0x3b, 0x84, 0xec, 0xbf, 0x41, 0x93, 0xf7, 0x77, 0xb4, 0x0c,
	0x1b, 0x34, 0x79, 0xba, 0x58, 0xb6, 0x35, 0x68, 0xe5, 0x3d, 0x4a, 0xe6, 0xfd, 0x4b, 0xcc, 0x28,
	0xc6, 0xa4, 0x72, 0xf2, 0x2b, 0x95, 0xcb, 0x8b, 0x1b, 0xd2, 0x75, 0x7d, 0x72, 0xf9, 0x66, 0x48,
	0x0d, 0x87, 0x6c, 0x1d, 0x0c, 0x99, 0xee, 0xa7, 0xb4, 0x23, 0x68, 0xca, 0xb4, 0xbf, 0x07, 0x62,
	0x25, 0x57, 0x92, 0xee, 0x2a, 0x2b, 0x9f, 0xab, 0xac, 0x1e, 0x54, 0xee, 0x80, 0x9e, 0xc9, 0x2c,
	0x56, 0x19, 0xcb, 0xbe, 0xdd, 0x75, 0x1e, 0xb0, 0x27, 0x50, 0x97, 0xae, 0x1b, 0xdd, 0x24, 0x3c,
	0x8b, 0xe5, 0xe5, 0x48, 0x1c, 0xab, 0xbd, 0xbb, 0x1c, 0x89, 0xcb, 0xb8, 0x84, 0x8a, 0x93, 0x84,
	0x7d, 0x37, 0x14, 0xf1, 0xcb, 0x9f, 0xc1, 0xc8, 0x4f, 0x9c, 0x18, 0xa0, 0xde, 0x4d, 0xcd, 0x12,
	0x69, 0x40, 0x75, 0x7a, 0x35, 0x1b, 0xd3, 0xdf, 0xc6, 0xd4, 0x54, 0x08, 0x80, 0xf1, 0xeb, 0xed,
	0xf0, 0x71, 0x4c, 0x4d, 0x95, 0xd4, 0x40, 0x1f, 0x8e, 0x26, 0xee, 0x9d, 0x59, 0xbe, 0xbc, 0x80,
	0xea, 0x76, 0x24, 0x09, 0xdf, 0x4e, 0xaf, 0xae, 0x1e, 0xcd, 0x12, 0xa9, 0x82, 0x46, 0xa7, 0xd3,
	0x89, 0xa9, 0x48, 0xeb, 0x61, 0x36, 0xa6, 0x66, 0x79, 0xf0, 0x6f, 0x19, 0xea, 0x92, 0x3b, 0x63,
	0xc9, 0x26, 0x58, 0x30, 0xd2, 0x07, 0xb8, 0x4e, 0x98, 0x27, 0x18, 0xee, 0xed, 0xeb, 0x7d, 0x47,
	0x3b, 0x09, 0xdb, 0x8d, 0x3d, 0xe8, 0x8e, 0xec, 0x12, 0x39, 0x87, 0xca, 0x0d, 0x13, 0xc8, 0x7f,
	0x33, 0xc1, 0x11, 0xad, 0x0f, 0x0d, 0x37, 0xda, 0x04, 0x82, 0xdd, 0x73, 0xe4, 0x7e, 0xb5, 0x57,
	0xa3, 0x90, 0x6b, 0xfb, 0x24, 0xff, 0x93, 0xd8, 0x25, 0xe2, 0x40, 0xed, 0x96, 0x79, 0x1b, 0xf6,
	0x59, 0x7e, 0x1f, 0x9a, 0xc3, 0x38, 0x66, 0x91, 0xbf, 0xfd, 0x09, 0x1c, 0x5e, 0x7f, 0xfb, 0xcb,
	0x81, 0x8b, 0x5d, 0xfd, 0x04, 0xad, 0x83, 0x27, 0x29, 0x79, 0x77, 0x4c, 0x6d, 0xf3, 0xd0, 0xc7,
	0x57, 0x0e, 0x34, 0x1f, 0x62, 0xdf, 0x13, 0xec, 0x83, 0x42, 0xc7, 0x83, 0x34, 0x47, 0x6c, 0xcd,
	0x3e, 0xcd, 0xef, 0xc3, 0x97, 0x42, 0xd2, 0x5d, 0x5b, 0x07, 0x72, 0xb6, 0xdf, 0x35, 0x69, 0x97,
	0xe6, 0x06, 0xfe, 0x39, 0x7e, 0xfc, 0x3f, 0x00, 0x00, 0xff, 0xff, 0x31, 0xc5, 0x32, 0x77, 0x42,
	0x06, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ChatServiceClient is the client API for ChatService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ChatServiceClient interface {
	CreateChat(ctx context.Context, in *ChatWithUsers, opts ...grpc.CallOption) (*ChatID, error)
	GetChat(ctx context.Context, in *Chat, opts ...grpc.CallOption) (*ChatID, error)
	InviteToChat(ctx context.Context, in *UserInGroup, opts ...grpc.CallOption) (*Result, error)
	LeaveChat(ctx context.Context, in *UserInGroup, opts ...grpc.CallOption) (*Result, error)
	AppendMessage(ctx context.Context, in *Message, opts ...grpc.CallOption) (*MessageID, error)
	AppendMessages(ctx context.Context, in *Messages, opts ...grpc.CallOption) (*MessagesID, error)
	UpdateMessage(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Result, error)
	DeleteMessage(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Result, error)
	//rpc GetUserMessages(User) returns (Messages) {}
	GetChatMessages(ctx context.Context, in *ChatID, opts ...grpc.CallOption) (*Messages, error)
}

type chatServiceClient struct {
	cc *grpc.ClientConn
}

func NewChatServiceClient(cc *grpc.ClientConn) ChatServiceClient {
	return &chatServiceClient{cc}
}

func (c *chatServiceClient) CreateChat(ctx context.Context, in *ChatWithUsers, opts ...grpc.CallOption) (*ChatID, error) {
	out := new(ChatID)
	err := c.cc.Invoke(ctx, "/chat.ChatService/CreateChat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) GetChat(ctx context.Context, in *Chat, opts ...grpc.CallOption) (*ChatID, error) {
	out := new(ChatID)
	err := c.cc.Invoke(ctx, "/chat.ChatService/GetChat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) InviteToChat(ctx context.Context, in *UserInGroup, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/chat.ChatService/InviteToChat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) LeaveChat(ctx context.Context, in *UserInGroup, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/chat.ChatService/LeaveChat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) AppendMessage(ctx context.Context, in *Message, opts ...grpc.CallOption) (*MessageID, error) {
	out := new(MessageID)
	err := c.cc.Invoke(ctx, "/chat.ChatService/AppendMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) AppendMessages(ctx context.Context, in *Messages, opts ...grpc.CallOption) (*MessagesID, error) {
	out := new(MessagesID)
	err := c.cc.Invoke(ctx, "/chat.ChatService/AppendMessages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) UpdateMessage(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/chat.ChatService/UpdateMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) DeleteMessage(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/chat.ChatService/DeleteMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) GetChatMessages(ctx context.Context, in *ChatID, opts ...grpc.CallOption) (*Messages, error) {
	out := new(Messages)
	err := c.cc.Invoke(ctx, "/chat.ChatService/GetChatMessages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChatServiceServer is the server API for ChatService service.
type ChatServiceServer interface {
	CreateChat(context.Context, *ChatWithUsers) (*ChatID, error)
	GetChat(context.Context, *Chat) (*ChatID, error)
	InviteToChat(context.Context, *UserInGroup) (*Result, error)
	LeaveChat(context.Context, *UserInGroup) (*Result, error)
	AppendMessage(context.Context, *Message) (*MessageID, error)
	AppendMessages(context.Context, *Messages) (*MessagesID, error)
	UpdateMessage(context.Context, *Message) (*Result, error)
	DeleteMessage(context.Context, *Message) (*Result, error)
	//rpc GetUserMessages(User) returns (Messages) {}
	GetChatMessages(context.Context, *ChatID) (*Messages, error)
}

// UnimplementedChatServiceServer can be embedded to have forward compatible implementations.
type UnimplementedChatServiceServer struct {
}

func (*UnimplementedChatServiceServer) CreateChat(ctx context.Context, req *ChatWithUsers) (*ChatID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateChat not implemented")
}
func (*UnimplementedChatServiceServer) GetChat(ctx context.Context, req *Chat) (*ChatID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChat not implemented")
}
func (*UnimplementedChatServiceServer) InviteToChat(ctx context.Context, req *UserInGroup) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InviteToChat not implemented")
}
func (*UnimplementedChatServiceServer) LeaveChat(ctx context.Context, req *UserInGroup) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LeaveChat not implemented")
}
func (*UnimplementedChatServiceServer) AppendMessage(ctx context.Context, req *Message) (*MessageID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppendMessage not implemented")
}
func (*UnimplementedChatServiceServer) AppendMessages(ctx context.Context, req *Messages) (*MessagesID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppendMessages not implemented")
}
func (*UnimplementedChatServiceServer) UpdateMessage(ctx context.Context, req *Message) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMessage not implemented")
}
func (*UnimplementedChatServiceServer) DeleteMessage(ctx context.Context, req *Message) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMessage not implemented")
}
func (*UnimplementedChatServiceServer) GetChatMessages(ctx context.Context, req *ChatID) (*Messages, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChatMessages not implemented")
}

func RegisterChatServiceServer(s *grpc.Server, srv ChatServiceServer) {
	s.RegisterService(&_ChatService_serviceDesc, srv)
}

func _ChatService_CreateChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChatWithUsers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).CreateChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.ChatService/CreateChat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).CreateChat(ctx, req.(*ChatWithUsers))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_GetChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Chat)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).GetChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.ChatService/GetChat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).GetChat(ctx, req.(*Chat))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_InviteToChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserInGroup)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).InviteToChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.ChatService/InviteToChat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).InviteToChat(ctx, req.(*UserInGroup))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_LeaveChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserInGroup)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).LeaveChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.ChatService/LeaveChat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).LeaveChat(ctx, req.(*UserInGroup))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_AppendMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).AppendMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.ChatService/AppendMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).AppendMessage(ctx, req.(*Message))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_AppendMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Messages)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).AppendMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.ChatService/AppendMessages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).AppendMessages(ctx, req.(*Messages))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_UpdateMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).UpdateMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.ChatService/UpdateMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).UpdateMessage(ctx, req.(*Message))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_DeleteMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).DeleteMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.ChatService/DeleteMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).DeleteMessage(ctx, req.(*Message))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_GetChatMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChatID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).GetChatMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.ChatService/GetChatMessages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).GetChatMessages(ctx, req.(*ChatID))
	}
	return interceptor(ctx, in, info, handler)
}

var _ChatService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "chat.ChatService",
	HandlerType: (*ChatServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateChat",
			Handler:    _ChatService_CreateChat_Handler,
		},
		{
			MethodName: "GetChat",
			Handler:    _ChatService_GetChat_Handler,
		},
		{
			MethodName: "InviteToChat",
			Handler:    _ChatService_InviteToChat_Handler,
		},
		{
			MethodName: "LeaveChat",
			Handler:    _ChatService_LeaveChat_Handler,
		},
		{
			MethodName: "AppendMessage",
			Handler:    _ChatService_AppendMessage_Handler,
		},
		{
			MethodName: "AppendMessages",
			Handler:    _ChatService_AppendMessages_Handler,
		},
		{
			MethodName: "UpdateMessage",
			Handler:    _ChatService_UpdateMessage_Handler,
		},
		{
			MethodName: "DeleteMessage",
			Handler:    _ChatService_DeleteMessage_Handler,
		},
		{
			MethodName: "GetChatMessages",
			Handler:    _ChatService_GetChatMessages_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "chat.proto",
}
