// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	database "github.com/go-park-mail-ru/2019_1_Escapade/internal/pkg/database"

	mock "github.com/stretchr/testify/mock"

	models "github.com/go-park-mail-ru/2019_1_Escapade/internal/pkg/models"
)

// GameRepositoryI is an autogenerated mock type for the GameRepositoryI type
type GameRepositoryI struct {
	mock.Mock
}

// CreateActions provides a mock function with given fields: tx, GameID, actions
func (_m *GameRepositoryI) CreateActions(tx database.TransactionI, GameID int32, actions []models.Action) error {
	ret := _m.Called(tx, GameID, actions)

	var r0 error
	if rf, ok := ret.Get(0).(func(database.TransactionI, int32, []models.Action) error); ok {
		r0 = rf(tx, GameID, actions)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateCells provides a mock function with given fields: tx, FieldID, cells
func (_m *GameRepositoryI) CreateCells(tx database.TransactionI, FieldID int32, cells []models.Cell) error {
	ret := _m.Called(tx, FieldID, cells)

	var r0 error
	if rf, ok := ret.Get(0).(func(database.TransactionI, int32, []models.Cell) error); ok {
		r0 = rf(tx, FieldID, cells)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateField provides a mock function with given fields: tx, gameID, field
func (_m *GameRepositoryI) CreateField(tx database.TransactionI, gameID int32, field models.Field) (int32, error) {
	ret := _m.Called(tx, gameID, field)

	var r0 int32
	if rf, ok := ret.Get(0).(func(database.TransactionI, int32, models.Field) int32); ok {
		r0 = rf(tx, gameID, field)
	} else {
		r0 = ret.Get(0).(int32)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(database.TransactionI, int32, models.Field) error); ok {
		r1 = rf(tx, gameID, field)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateGame provides a mock function with given fields: tx, game
func (_m *GameRepositoryI) CreateGame(tx database.TransactionI, game *models.Game) (int32, error) {
	ret := _m.Called(tx, game)

	var r0 int32
	if rf, ok := ret.Get(0).(func(database.TransactionI, *models.Game) int32); ok {
		r0 = rf(tx, game)
	} else {
		r0 = ret.Get(0).(int32)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(database.TransactionI, *models.Game) error); ok {
		r1 = rf(tx, game)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateGamers provides a mock function with given fields: tx, GameID, gamers
func (_m *GameRepositoryI) CreateGamers(tx database.TransactionI, GameID int32, gamers []models.Gamer) error {
	ret := _m.Called(tx, GameID, gamers)

	var r0 error
	if rf, ok := ret.Get(0).(func(database.TransactionI, int32, []models.Gamer) error); ok {
		r0 = rf(tx, GameID, gamers)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FetchAllActions provides a mock function with given fields: tx, gameID
func (_m *GameRepositoryI) FetchAllActions(tx database.TransactionI, gameID int32) ([]models.Action, error) {
	ret := _m.Called(tx, gameID)

	var r0 []models.Action
	if rf, ok := ret.Get(0).(func(database.TransactionI, int32) []models.Action); ok {
		r0 = rf(tx, gameID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Action)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(database.TransactionI, int32) error); ok {
		r1 = rf(tx, gameID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FetchAllCells provides a mock function with given fields: tx, fieldID
func (_m *GameRepositoryI) FetchAllCells(tx database.TransactionI, fieldID int) ([]models.Cell, error) {
	ret := _m.Called(tx, fieldID)

	var r0 []models.Cell
	if rf, ok := ret.Get(0).(func(database.TransactionI, int) []models.Cell); ok {
		r0 = rf(tx, fieldID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Cell)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(database.TransactionI, int) error); ok {
		r1 = rf(tx, fieldID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FetchAllGamers provides a mock function with given fields: tx, gameID
func (_m *GameRepositoryI) FetchAllGamers(tx database.TransactionI, gameID int32) ([]models.Gamer, error) {
	ret := _m.Called(tx, gameID)

	var r0 []models.Gamer
	if rf, ok := ret.Get(0).(func(database.TransactionI, int32) []models.Gamer); ok {
		r0 = rf(tx, gameID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Gamer)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(database.TransactionI, int32) error); ok {
		r1 = rf(tx, gameID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FetchAllRoomsID provides a mock function with given fields: tx, userID
func (_m *GameRepositoryI) FetchAllRoomsID(tx database.TransactionI, userID int32) ([]string, error) {
	ret := _m.Called(tx, userID)

	var r0 []string
	if rf, ok := ret.Get(0).(func(database.TransactionI, int32) []string); ok {
		r0 = rf(tx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(database.TransactionI, int32) error); ok {
		r1 = rf(tx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FetchOneField provides a mock function with given fields: tx, gameID
func (_m *GameRepositoryI) FetchOneField(tx database.TransactionI, gameID int32) (int, models.Field, error) {
	ret := _m.Called(tx, gameID)

	var r0 int
	if rf, ok := ret.Get(0).(func(database.TransactionI, int32) int); ok {
		r0 = rf(tx, gameID)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 models.Field
	if rf, ok := ret.Get(1).(func(database.TransactionI, int32) models.Field); ok {
		r1 = rf(tx, gameID)
	} else {
		r1 = ret.Get(1).(models.Field)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(database.TransactionI, int32) error); ok {
		r2 = rf(tx, gameID)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// FetchOneGame provides a mock function with given fields: tx, roomID
func (_m *GameRepositoryI) FetchOneGame(tx database.TransactionI, roomID string) (models.Game, error) {
	ret := _m.Called(tx, roomID)

	var r0 models.Game
	if rf, ok := ret.Get(0).(func(database.TransactionI, string) models.Game); ok {
		r0 = rf(tx, roomID)
	} else {
		r0 = ret.Get(0).(models.Game)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(database.TransactionI, string) error); ok {
		r1 = rf(tx, roomID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateGame provides a mock function with given fields: tx, game
func (_m *GameRepositoryI) UpdateGame(tx database.TransactionI, game *models.Game) error {
	ret := _m.Called(tx, game)

	var r0 error
	if rf, ok := ret.Get(0).(func(database.TransactionI, *models.Game) error); ok {
		r0 = rf(tx, game)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
