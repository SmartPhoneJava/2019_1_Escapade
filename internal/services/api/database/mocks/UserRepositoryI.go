// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	database "github.com/go-park-mail-ru/2019_1_Escapade/internal/pkg/database"
	apidatabase "github.com/go-park-mail-ru/2019_1_Escapade/internal/services/api/database"

	mock "github.com/stretchr/testify/mock"

	models "github.com/go-park-mail-ru/2019_1_Escapade/internal/pkg/models"
)

// UserRepositoryI is an autogenerated mock type for the UserRepositoryI type
type UserRepositoryI struct {
	mock.Mock
}

// CheckNamePassword provides a mock function with given fields: tx, name, password
func (_m *UserRepositoryI) CheckNamePassword(tx database.TransactionI, name string, password string) (int32, *models.UserPublicInfo, error) {
	ret := _m.Called(tx, name, password)

	var r0 int32
	if rf, ok := ret.Get(0).(func(database.TransactionI, string, string) int32); ok {
		r0 = rf(tx, name, password)
	} else {
		r0 = ret.Get(0).(int32)
	}

	var r1 *models.UserPublicInfo
	if rf, ok := ret.Get(1).(func(database.TransactionI, string, string) *models.UserPublicInfo); ok {
		r1 = rf(tx, name, password)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*models.UserPublicInfo)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(database.TransactionI, string, string) error); ok {
		r2 = rf(tx, name, password)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Create provides a mock function with given fields: tx, user
func (_m *UserRepositoryI) Create(tx database.TransactionI, user *models.UserPrivateInfo) (int, error) {
	ret := _m.Called(tx, user)

	var r0 int
	if rf, ok := ret.Get(0).(func(database.TransactionI, *models.UserPrivateInfo) int); ok {
		r0 = rf(tx, user)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(database.TransactionI, *models.UserPrivateInfo) error); ok {
		r1 = rf(tx, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: tx, user
func (_m *UserRepositoryI) Delete(tx database.TransactionI, user *models.UserPrivateInfo) error {
	ret := _m.Called(tx, user)

	var r0 error
	if rf, ok := ret.Get(0).(func(database.TransactionI, *models.UserPrivateInfo) error); ok {
		r0 = rf(tx, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FetchAll provides a mock function with given fields: tx, params
func (_m *UserRepositoryI) FetchAll(tx database.TransactionI, params apidatabase.UsersSelectParams) ([]*models.UserPublicInfo, error) {
	ret := _m.Called(tx, params)

	var r0 []*models.UserPublicInfo
	if rf, ok := ret.Get(0).(func(database.TransactionI, apidatabase.UsersSelectParams) []*models.UserPublicInfo); ok {
		r0 = rf(tx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.UserPublicInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(database.TransactionI, apidatabase.UsersSelectParams) error); ok {
		r1 = rf(tx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FetchNamePassword provides a mock function with given fields: tx, userID
func (_m *UserRepositoryI) FetchNamePassword(tx database.TransactionI, userID int32) (*models.UserPrivateInfo, error) {
	ret := _m.Called(tx, userID)

	var r0 *models.UserPrivateInfo
	if rf, ok := ret.Get(0).(func(database.TransactionI, int32) *models.UserPrivateInfo); ok {
		r0 = rf(tx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.UserPrivateInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(database.TransactionI, int32) error); ok {
		r1 = rf(tx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FetchOne provides a mock function with given fields: tx, userID, difficult
func (_m *UserRepositoryI) FetchOne(tx database.TransactionI, userID int32, difficult int) (*models.UserPublicInfo, error) {
	ret := _m.Called(tx, userID, difficult)

	var r0 *models.UserPublicInfo
	if rf, ok := ret.Get(0).(func(database.TransactionI, int32, int) *models.UserPublicInfo); ok {
		r0 = rf(tx, userID, difficult)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.UserPublicInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(database.TransactionI, int32, int) error); ok {
		r1 = rf(tx, userID, difficult)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PagesCount provides a mock function with given fields: dbI, perPage
func (_m *UserRepositoryI) PagesCount(dbI database.Interface, perPage int) (int, error) {
	ret := _m.Called(dbI, perPage)

	var r0 int
	if rf, ok := ret.Get(0).(func(database.Interface, int) int); ok {
		r0 = rf(dbI, perPage)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(database.Interface, int) error); ok {
		r1 = rf(dbI, perPage)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateLastSeen provides a mock function with given fields: tx, id
func (_m *UserRepositoryI) UpdateLastSeen(tx database.TransactionI, id int) error {
	ret := _m.Called(tx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(database.TransactionI, int) error); ok {
		r0 = rf(tx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateNamePassword provides a mock function with given fields: tx, user
func (_m *UserRepositoryI) UpdateNamePassword(tx database.TransactionI, user *models.UserPrivateInfo) error {
	ret := _m.Called(tx, user)

	var r0 error
	if rf, ok := ret.Get(0).(func(database.TransactionI, *models.UserPrivateInfo) error); ok {
		r0 = rf(tx, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
