// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	config "github.com/go-park-mail-ru/2019_1_Escapade/internal/pkg/config"
	database "github.com/go-park-mail-ru/2019_1_Escapade/internal/services/api/database"

	mock "github.com/stretchr/testify/mock"

	models "github.com/go-park-mail-ru/2019_1_Escapade/internal/pkg/models"

	pkgdatabase "github.com/go-park-mail-ru/2019_1_Escapade/internal/pkg/database"
)

// UserUseCaseI is an autogenerated mock type for the UserUseCaseI type
type UserUseCaseI struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *UserUseCaseI) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateAccount provides a mock function with given fields: user
func (_m *UserUseCaseI) CreateAccount(user *models.UserPrivateInfo) (int, error) {
	ret := _m.Called(user)

	var r0 int
	if rf, ok := ret.Get(0).(func(*models.UserPrivateInfo) int); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*models.UserPrivateInfo) error); ok {
		r1 = rf(user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteAccount provides a mock function with given fields: user
func (_m *UserUseCaseI) DeleteAccount(user *models.UserPrivateInfo) error {
	ret := _m.Called(user)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.UserPrivateInfo) error); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EnterAccount provides a mock function with given fields: name, password
func (_m *UserUseCaseI) EnterAccount(name string, password string) (int32, error) {
	ret := _m.Called(name, password)

	var r0 int32
	if rf, ok := ret.Get(0).(func(string, string) int32); ok {
		r0 = rf(name, password)
	} else {
		r0 = ret.Get(0).(int32)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(name, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FetchAll provides a mock function with given fields: difficult, page, perPage, sort
func (_m *UserUseCaseI) FetchAll(difficult int, page int, perPage int, sort string) ([]*models.UserPublicInfo, error) {
	ret := _m.Called(difficult, page, perPage, sort)

	var r0 []*models.UserPublicInfo
	if rf, ok := ret.Get(0).(func(int, int, int, string) []*models.UserPublicInfo); ok {
		r0 = rf(difficult, page, perPage, sort)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.UserPublicInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, int, int, string) error); ok {
		r1 = rf(difficult, page, perPage, sort)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FetchOne provides a mock function with given fields: userID, difficult
func (_m *UserUseCaseI) FetchOne(userID int32, difficult int) (*models.UserPublicInfo, error) {
	ret := _m.Called(userID, difficult)

	var r0 *models.UserPublicInfo
	if rf, ok := ret.Get(0).(func(int32, int) *models.UserPublicInfo); ok {
		r0 = rf(userID, difficult)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.UserPublicInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int32, int) error); ok {
		r1 = rf(userID, difficult)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields:
func (_m *UserUseCaseI) Get() pkgdatabase.Interface {
	ret := _m.Called()

	var r0 pkgdatabase.Interface
	if rf, ok := ret.Get(0).(func() pkgdatabase.Interface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(pkgdatabase.Interface)
		}
	}

	return r0
}

// Init provides a mock function with given fields: user, record
func (_m *UserUseCaseI) Init(user database.UserRepositoryI, record database.RecordRepositoryI) database.UserUseCaseI {
	ret := _m.Called(user, record)

	var r0 database.UserUseCaseI
	if rf, ok := ret.Get(0).(func(database.UserRepositoryI, database.RecordRepositoryI) database.UserUseCaseI); ok {
		r0 = rf(user, record)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(database.UserUseCaseI)
		}
	}

	return r0
}

// Open provides a mock function with given fields: CDB, db
func (_m *UserUseCaseI) Open(CDB config.Database, db pkgdatabase.Interface) error {
	ret := _m.Called(CDB, db)

	var r0 error
	if rf, ok := ret.Get(0).(func(config.Database, pkgdatabase.Interface) error); ok {
		r0 = rf(CDB, db)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PagesCount provides a mock function with given fields: perPage
func (_m *UserUseCaseI) PagesCount(perPage int) (int, error) {
	ret := _m.Called(perPage)

	var r0 int
	if rf, ok := ret.Get(0).(func(int) int); ok {
		r0 = rf(perPage)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(perPage)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateAccount provides a mock function with given fields: userID, user
func (_m *UserUseCaseI) UpdateAccount(userID int32, user *models.UserPrivateInfo) error {
	ret := _m.Called(userID, user)

	var r0 error
	if rf, ok := ret.Get(0).(func(int32, *models.UserPrivateInfo) error); ok {
		r0 = rf(userID, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Use provides a mock function with given fields: db
func (_m *UserUseCaseI) Use(db pkgdatabase.Interface) error {
	ret := _m.Called(db)

	var r0 error
	if rf, ok := ret.Get(0).(func(pkgdatabase.Interface) error); ok {
		r0 = rf(db)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
