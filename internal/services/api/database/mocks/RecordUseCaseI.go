// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	config "github.com/go-park-mail-ru/2019_1_Escapade/internal/pkg/config"
	database "github.com/go-park-mail-ru/2019_1_Escapade/internal/services/api/database"

	mock "github.com/stretchr/testify/mock"

	models "github.com/go-park-mail-ru/2019_1_Escapade/internal/pkg/models"

	pkgdatabase "github.com/go-park-mail-ru/2019_1_Escapade/internal/pkg/database"
)

// RecordUseCaseI is an autogenerated mock type for the RecordUseCaseI type
type RecordUseCaseI struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *RecordUseCaseI) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields:
func (_m *RecordUseCaseI) Get() pkgdatabase.Interface {
	ret := _m.Called()

	var r0 pkgdatabase.Interface
	if rf, ok := ret.Get(0).(func() pkgdatabase.Interface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(pkgdatabase.Interface)
		}
	}

	return r0
}

// Init provides a mock function with given fields: record
func (_m *RecordUseCaseI) Init(record database.RecordRepositoryI) database.RecordUseCaseI {
	ret := _m.Called(record)

	var r0 database.RecordUseCaseI
	if rf, ok := ret.Get(0).(func(database.RecordRepositoryI) database.RecordUseCaseI); ok {
		r0 = rf(record)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(database.RecordUseCaseI)
		}
	}

	return r0
}

// Open provides a mock function with given fields: CDB, db
func (_m *RecordUseCaseI) Open(CDB config.Database, db pkgdatabase.Interface) error {
	ret := _m.Called(CDB, db)

	var r0 error
	if rf, ok := ret.Get(0).(func(config.Database, pkgdatabase.Interface) error); ok {
		r0 = rf(CDB, db)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: id, record
func (_m *RecordUseCaseI) Update(id int32, record *models.Record) error {
	ret := _m.Called(id, record)

	var r0 error
	if rf, ok := ret.Get(0).(func(int32, *models.Record) error); ok {
		r0 = rf(id, record)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Use provides a mock function with given fields: db
func (_m *RecordUseCaseI) Use(db pkgdatabase.Interface) error {
	ret := _m.Called(db)

	var r0 error
	if rf, ok := ret.Get(0).(func(pkgdatabase.Interface) error); ok {
		r0 = rf(db)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
