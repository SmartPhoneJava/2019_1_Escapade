// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	config "github.com/go-park-mail-ru/2019_1_Escapade/internal/pkg/config"
	database "github.com/go-park-mail-ru/2019_1_Escapade/internal/services/api/database"

	mock "github.com/stretchr/testify/mock"

	pkgdatabase "github.com/go-park-mail-ru/2019_1_Escapade/internal/pkg/database"
)

// ImageUseCaseI is an autogenerated mock type for the ImageUseCaseI type
type ImageUseCaseI struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *ImageUseCaseI) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FetchByID provides a mock function with given fields: id
func (_m *ImageUseCaseI) FetchByID(id int32) (string, error) {
	ret := _m.Called(id)

	var r0 string
	if rf, ok := ret.Get(0).(func(int32) string); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int32) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FetchByName provides a mock function with given fields: name
func (_m *ImageUseCaseI) FetchByName(name string) (string, error) {
	ret := _m.Called(name)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields:
func (_m *ImageUseCaseI) Get() pkgdatabase.Interface {
	ret := _m.Called()

	var r0 pkgdatabase.Interface
	if rf, ok := ret.Get(0).(func() pkgdatabase.Interface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(pkgdatabase.Interface)
		}
	}

	return r0
}

// Init provides a mock function with given fields: image
func (_m *ImageUseCaseI) Init(image database.ImageRepositoryI) database.ImageUseCaseI {
	ret := _m.Called(image)

	var r0 database.ImageUseCaseI
	if rf, ok := ret.Get(0).(func(database.ImageRepositoryI) database.ImageUseCaseI); ok {
		r0 = rf(image)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(database.ImageUseCaseI)
		}
	}

	return r0
}

// Open provides a mock function with given fields: CDB, db
func (_m *ImageUseCaseI) Open(CDB config.Database, db pkgdatabase.Interface) error {
	ret := _m.Called(CDB, db)

	var r0 error
	if rf, ok := ret.Get(0).(func(config.Database, pkgdatabase.Interface) error); ok {
		r0 = rf(CDB, db)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: filename, userID
func (_m *ImageUseCaseI) Update(filename string, userID int32) error {
	ret := _m.Called(filename, userID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, int32) error); ok {
		r0 = rf(filename, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Use provides a mock function with given fields: db
func (_m *ImageUseCaseI) Use(db pkgdatabase.Interface) error {
	ret := _m.Called(db)

	var r0 error
	if rf, ok := ret.Get(0).(func(pkgdatabase.Interface) error); ok {
		r0 = rf(db)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
