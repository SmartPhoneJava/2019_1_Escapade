// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	config "github.com/go-park-mail-ru/2019_1_Escapade/internal/pkg/config"
	mock "github.com/stretchr/testify/mock"

	proto "github.com/go-park-mail-ru/2019_1_Escapade/internal/services/chat/proto"

	server "github.com/go-park-mail-ru/2019_1_Escapade/internal/pkg/server"
)

// ChatI is an autogenerated mock type for the ChatI type
type ChatI struct {
	mock.Mock
}

// AppendMessage provides a mock function with given fields: in
func (_m *ChatI) AppendMessage(in *proto.Message) (*proto.MessageID, error) {
	ret := _m.Called(in)

	var r0 *proto.MessageID
	if rf, ok := ret.Get(0).(func(*proto.Message) *proto.MessageID); ok {
		r0 = rf(in)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.MessageID)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*proto.Message) error); ok {
		r1 = rf(in)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AppendMessages provides a mock function with given fields: in
func (_m *ChatI) AppendMessages(in *proto.Messages) (*proto.MessagesID, error) {
	ret := _m.Called(in)

	var r0 *proto.MessagesID
	if rf, ok := ret.Get(0).(func(*proto.Messages) *proto.MessagesID); ok {
		r0 = rf(in)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.MessagesID)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*proto.Messages) error); ok {
		r1 = rf(in)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Close provides a mock function with given fields:
func (_m *ChatI) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateChat provides a mock function with given fields: in
func (_m *ChatI) CreateChat(in *proto.ChatWithUsers) (*proto.ChatID, error) {
	ret := _m.Called(in)

	var r0 *proto.ChatID
	if rf, ok := ret.Get(0).(func(*proto.ChatWithUsers) *proto.ChatID); ok {
		r0 = rf(in)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.ChatID)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*proto.ChatWithUsers) error); ok {
		r1 = rf(in)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteMessage provides a mock function with given fields: in
func (_m *ChatI) DeleteMessage(in *proto.Message) (*proto.Result, error) {
	ret := _m.Called(in)

	var r0 *proto.Result
	if rf, ok := ret.Get(0).(func(*proto.Message) *proto.Result); ok {
		r0 = rf(in)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.Result)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*proto.Message) error); ok {
		r1 = rf(in)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetChat provides a mock function with given fields: in
func (_m *ChatI) GetChat(in *proto.Chat) (*proto.ChatID, error) {
	ret := _m.Called(in)

	var r0 *proto.ChatID
	if rf, ok := ret.Get(0).(func(*proto.Chat) *proto.ChatID); ok {
		r0 = rf(in)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.ChatID)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*proto.Chat) error); ok {
		r1 = rf(in)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetChatMessages provides a mock function with given fields: in
func (_m *ChatI) GetChatMessages(in *proto.ChatID) (*proto.Messages, error) {
	ret := _m.Called(in)

	var r0 *proto.Messages
	if rf, ok := ret.Get(0).(func(*proto.ChatID) *proto.Messages); ok {
		r0 = rf(in)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.Messages)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*proto.ChatID) error); ok {
		r1 = rf(in)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Init provides a mock function with given fields: consul, required
func (_m *ChatI) Init(consul server.ConsulServiceI, required config.RequiredService) error {
	ret := _m.Called(consul, required)

	var r0 error
	if rf, ok := ret.Get(0).(func(server.ConsulServiceI, config.RequiredService) error); ok {
		r0 = rf(consul, required)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InviteToChat provides a mock function with given fields: in
func (_m *ChatI) InviteToChat(in *proto.UserInGroup) (*proto.Result, error) {
	ret := _m.Called(in)

	var r0 *proto.Result
	if rf, ok := ret.Get(0).(func(*proto.UserInGroup) *proto.Result); ok {
		r0 = rf(in)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.Result)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*proto.UserInGroup) error); ok {
		r1 = rf(in)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateMessage provides a mock function with given fields: in
func (_m *ChatI) UpdateMessage(in *proto.Message) (*proto.Result, error) {
	ret := _m.Called(in)

	var r0 *proto.Result
	if rf, ok := ret.Get(0).(func(*proto.Message) *proto.Result); ok {
		r0 = rf(in)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.Result)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*proto.Message) error); ok {
		r1 = rf(in)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
