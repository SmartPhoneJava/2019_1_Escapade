// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package models

import (
	sql "database/sql"
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonD2b7633eDecodeGithubComGoParkMailRu20191EscapadeEryModels(in *jlexer.Lexer, out *ProjectWithMembers) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "project":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Project).UnmarshalJSON(data))
			}
		case "members":
			if in.IsNull() {
				in.Skip()
				out.Members = nil
			} else {
				in.Delim('[')
				if out.Members == nil {
					if !in.IsDelim(']') {
						out.Members = make([]Projectmember, 0, 1)
					} else {
						out.Members = []Projectmember{}
					}
				} else {
					out.Members = (out.Members)[:0]
				}
				for !in.IsDelim(']') {
					var v1 Projectmember
					if data := in.Raw(); in.Ok() {
						in.AddError((v1).UnmarshalJSON(data))
					}
					out.Members = append(out.Members, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "scene":
			if in.IsNull() {
				in.Skip()
				out.Scenes = nil
			} else {
				in.Delim('[')
				if out.Scenes == nil {
					if !in.IsDelim(']') {
						out.Scenes = make([]Scene, 0, 1)
					} else {
						out.Scenes = []Scene{}
					}
				} else {
					out.Scenes = (out.Scenes)[:0]
				}
				for !in.IsDelim(']') {
					var v2 Scene
					if data := in.Raw(); in.Ok() {
						in.AddError((v2).UnmarshalJSON(data))
					}
					out.Scenes = append(out.Scenes, v2)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "you":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.You).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComGoParkMailRu20191EscapadeEryModels(out *jwriter.Writer, in ProjectWithMembers) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"project\":"
		out.RawString(prefix[1:])
		out.Raw((in.Project).MarshalJSON())
	}
	{
		const prefix string = ",\"members\":"
		out.RawString(prefix)
		if in.Members == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v3, v4 := range in.Members {
				if v3 > 0 {
					out.RawByte(',')
				}
				out.Raw((v4).MarshalJSON())
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"scene\":"
		out.RawString(prefix)
		if in.Scenes == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.Scenes {
				if v5 > 0 {
					out.RawByte(',')
				}
				out.Raw((v6).MarshalJSON())
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"you\":"
		out.RawString(prefix)
		out.Raw((in.You).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ProjectWithMembers) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20191EscapadeEryModels(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ProjectWithMembers) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20191EscapadeEryModels(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ProjectWithMembers) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20191EscapadeEryModels(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ProjectWithMembers) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20191EscapadeEryModels(l, v)
}
func easyjsonD2b7633eDecodeGithubComGoParkMailRu20191EscapadeEryModels1(in *jlexer.Lexer, out *Projectmember) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int32(in.Int32())
		case "name":
			out.Name = string(in.String())
		case "photo_title":
			out.PhotoTitle = string(in.String())
		case "user":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.User).UnmarshalJSON(data))
			}
		case "token":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Token).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComGoParkMailRu20191EscapadeEryModels1(out *jwriter.Writer, in Projectmember) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int32(int32(in.ID))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"photo_title\":"
		out.RawString(prefix)
		out.String(string(in.PhotoTitle))
	}
	{
		const prefix string = ",\"user\":"
		out.RawString(prefix)
		out.Raw((in.User).MarshalJSON())
	}
	{
		const prefix string = ",\"token\":"
		out.RawString(prefix)
		out.Raw((in.Token).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Projectmember) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20191EscapadeEryModels1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Projectmember) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20191EscapadeEryModels1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Projectmember) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20191EscapadeEryModels1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Projectmember) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20191EscapadeEryModels1(l, v)
}
func easyjsonD2b7633eDecodeGithubComGoParkMailRu20191EscapadeEryModels2(in *jlexer.Lexer, out *UserInProject) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int32(in.Int32())
		case "position":
			out.Position = string(in.String())
		case "user_id":
			out.UserID = int32(in.Int32())
		case "token_id":
			out.TokenID = int32(in.Int32())
		case "project_id":
			out.ProjectID = int32(in.Int32())
		case "from":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.From).UnmarshalJSON(data))
			}
		case "to":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.To).UnmarshalJSON(data))
			}
		case "user_confirmed":
			out.UserConfirmed = bool(in.Bool())
		case "project_confirmed":
			out.ProjectConfirmed = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComGoParkMailRu20191EscapadeEryModels2(out *jwriter.Writer, in UserInProject) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int32(int32(in.ID))
	}
	{
		const prefix string = ",\"position\":"
		out.RawString(prefix)
		out.String(string(in.Position))
	}
	{
		const prefix string = ",\"user_id\":"
		out.RawString(prefix)
		out.Int32(int32(in.UserID))
	}
	{
		const prefix string = ",\"token_id\":"
		out.RawString(prefix)
		out.Int32(int32(in.TokenID))
	}
	{
		const prefix string = ",\"project_id\":"
		out.RawString(prefix)
		out.Int32(int32(in.ProjectID))
	}
	{
		const prefix string = ",\"from\":"
		out.RawString(prefix)
		out.Raw((in.From).MarshalJSON())
	}
	{
		const prefix string = ",\"to\":"
		out.RawString(prefix)
		out.Raw((in.To).MarshalJSON())
	}
	{
		const prefix string = ",\"user_confirmed\":"
		out.RawString(prefix)
		out.Bool(bool(in.UserConfirmed))
	}
	{
		const prefix string = ",\"project_confirmed\":"
		out.RawString(prefix)
		out.Bool(bool(in.ProjectConfirmed))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UserInProject) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20191EscapadeEryModels2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UserInProject) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20191EscapadeEryModels2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UserInProject) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20191EscapadeEryModels2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UserInProject) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20191EscapadeEryModels2(l, v)
}
func easyjsonD2b7633eDecodeGithubComGoParkMailRu20191EscapadeEryModels3(in *jlexer.Lexer, out *ProjectToken) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int32(in.Int32())
		case "owner":
			out.Owner = bool(in.Bool())
		case "edit_name":
			out.EditName = bool(in.Bool())
		case "edit_info":
			out.EditInfo = bool(in.Bool())
		case "edit_access":
			out.EditAccess = bool(in.Bool())
		case "edit_scene":
			out.EditScene = bool(in.Bool())
		case "edit_members_list":
			out.EditMembersList = bool(in.Bool())
		case "edit_members_token":
			out.EditMembersToken = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComGoParkMailRu20191EscapadeEryModels3(out *jwriter.Writer, in ProjectToken) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int32(int32(in.ID))
	}
	{
		const prefix string = ",\"owner\":"
		out.RawString(prefix)
		out.Bool(bool(in.Owner))
	}
	{
		const prefix string = ",\"edit_name\":"
		out.RawString(prefix)
		out.Bool(bool(in.EditName))
	}
	{
		const prefix string = ",\"edit_info\":"
		out.RawString(prefix)
		out.Bool(bool(in.EditInfo))
	}
	{
		const prefix string = ",\"edit_access\":"
		out.RawString(prefix)
		out.Bool(bool(in.EditAccess))
	}
	{
		const prefix string = ",\"edit_scene\":"
		out.RawString(prefix)
		out.Bool(bool(in.EditScene))
	}
	{
		const prefix string = ",\"edit_members_list\":"
		out.RawString(prefix)
		out.Bool(bool(in.EditMembersList))
	}
	{
		const prefix string = ",\"edit_members_token\":"
		out.RawString(prefix)
		out.Bool(bool(in.EditMembersToken))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ProjectToken) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20191EscapadeEryModels3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ProjectToken) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20191EscapadeEryModels3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ProjectToken) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20191EscapadeEryModels3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ProjectToken) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20191EscapadeEryModels3(l, v)
}
func easyjsonD2b7633eDecodeGithubComGoParkMailRu20191EscapadeEryModels4(in *jlexer.Lexer, out *Projects) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "projects":
			if in.IsNull() {
				in.Skip()
				out.Projects = nil
			} else {
				in.Delim('[')
				if out.Projects == nil {
					if !in.IsDelim(']') {
						out.Projects = make([]Project, 0, 1)
					} else {
						out.Projects = []Project{}
					}
				} else {
					out.Projects = (out.Projects)[:0]
				}
				for !in.IsDelim(']') {
					var v7 Project
					if data := in.Raw(); in.Ok() {
						in.AddError((v7).UnmarshalJSON(data))
					}
					out.Projects = append(out.Projects, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComGoParkMailRu20191EscapadeEryModels4(out *jwriter.Writer, in Projects) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"projects\":"
		out.RawString(prefix[1:])
		if in.Projects == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v8, v9 := range in.Projects {
				if v8 > 0 {
					out.RawByte(',')
				}
				out.Raw((v9).MarshalJSON())
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Projects) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20191EscapadeEryModels4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Projects) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20191EscapadeEryModels4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Projects) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20191EscapadeEryModels4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Projects) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20191EscapadeEryModels4(l, v)
}
func easyjsonD2b7633eDecodeGithubComGoParkMailRu20191EscapadeEryModels5(in *jlexer.Lexer, out *Project) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int32(in.Int32())
		case "name":
			easyjsonD2b7633eDecodeDatabaseSql(in, &out.Name)
		case "public_access":
			out.PublicAccess = bool(in.Bool())
		case "company_access":
			out.CompanyAccess = bool(in.Bool())
		case "public_edit":
			out.PublicEdit = bool(in.Bool())
		case "company_edit":
			out.CompanyEdit = bool(in.Bool())
		case "about":
			easyjsonD2b7633eDecodeDatabaseSql(in, &out.About)
		case "add":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Add).UnmarshalJSON(data))
			}
		case "user_confirmed":
			out.UserConfirmed = bool(in.Bool())
		case "project_confirmed":
			out.ProjectConfirmed = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComGoParkMailRu20191EscapadeEryModels5(out *jwriter.Writer, in Project) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int32(int32(in.ID))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		easyjsonD2b7633eEncodeDatabaseSql(out, in.Name)
	}
	{
		const prefix string = ",\"public_access\":"
		out.RawString(prefix)
		out.Bool(bool(in.PublicAccess))
	}
	{
		const prefix string = ",\"company_access\":"
		out.RawString(prefix)
		out.Bool(bool(in.CompanyAccess))
	}
	{
		const prefix string = ",\"public_edit\":"
		out.RawString(prefix)
		out.Bool(bool(in.PublicEdit))
	}
	{
		const prefix string = ",\"company_edit\":"
		out.RawString(prefix)
		out.Bool(bool(in.CompanyEdit))
	}
	{
		const prefix string = ",\"about\":"
		out.RawString(prefix)
		easyjsonD2b7633eEncodeDatabaseSql(out, in.About)
	}
	{
		const prefix string = ",\"add\":"
		out.RawString(prefix)
		out.Raw((in.Add).MarshalJSON())
	}
	{
		const prefix string = ",\"user_confirmed\":"
		out.RawString(prefix)
		out.Bool(bool(in.UserConfirmed))
	}
	{
		const prefix string = ",\"project_confirmed\":"
		out.RawString(prefix)
		out.Bool(bool(in.ProjectConfirmed))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Project) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20191EscapadeEryModels5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Project) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20191EscapadeEryModels5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Project) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20191EscapadeEryModels5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Project) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20191EscapadeEryModels5(l, v)
}
func easyjsonD2b7633eDecodeDatabaseSql(in *jlexer.Lexer, out *sql.NullString) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "String":
			out.String = string(in.String())
		case "Valid":
			out.Valid = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeDatabaseSql(out *jwriter.Writer, in sql.NullString) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"String\":"
		out.RawString(prefix[1:])
		out.String(string(in.String))
	}
	{
		const prefix string = ",\"Valid\":"
		out.RawString(prefix)
		out.Bool(bool(in.Valid))
	}
	out.RawByte('}')
}
func easyjsonD2b7633eDecodeGithubComGoParkMailRu20191EscapadeEryModels6(in *jlexer.Lexer, out *ProjectsList) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "projects":
			if in.IsNull() {
				in.Skip()
				out.Projects = nil
			} else {
				in.Delim('[')
				if out.Projects == nil {
					if !in.IsDelim(']') {
						out.Projects = make([]Project, 0, 1)
					} else {
						out.Projects = []Project{}
					}
				} else {
					out.Projects = (out.Projects)[:0]
				}
				for !in.IsDelim(']') {
					var v10 Project
					if data := in.Raw(); in.Ok() {
						in.AddError((v10).UnmarshalJSON(data))
					}
					out.Projects = append(out.Projects, v10)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComGoParkMailRu20191EscapadeEryModels6(out *jwriter.Writer, in ProjectsList) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"projects\":"
		out.RawString(prefix[1:])
		if in.Projects == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v11, v12 := range in.Projects {
				if v11 > 0 {
					out.RawByte(',')
				}
				out.Raw((v12).MarshalJSON())
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ProjectsList) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20191EscapadeEryModels6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ProjectsList) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20191EscapadeEryModels6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ProjectsList) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20191EscapadeEryModels6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ProjectsList) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20191EscapadeEryModels6(l, v)
}
func easyjsonD2b7633eDecodeGithubComGoParkMailRu20191EscapadeEryModels7(in *jlexer.Lexer, out *Erythrocyte) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int32(in.Int32())
		case "user_id":
			out.UserID = int32(in.Int32())
		case "texture_id":
			out.TextureID = int32(in.Int32())
		case "form_id":
			out.FormID = int32(in.Int32())
		case "scene_id":
			out.SceneID = int32(in.Int32())
		case "disease_id":
			out.DiseaseID = int32(in.Int32())
		case "size_x":
			out.SizeX = float32(in.Float32())
		case "size_y":
			out.SizeY = float32(in.Float32())
		case "size_z":
			out.SizeZ = float32(in.Float32())
		case "angle_x":
			out.AngleX = float32(in.Float32())
		case "angle_y":
			out.AngleY = float32(in.Float32())
		case "angle_z":
			out.AngleZ = float32(in.Float32())
		case "scale_x":
			out.ScaleX = float32(in.Float32())
		case "scale_y":
			out.ScaleY = float32(in.Float32())
		case "scale_z":
			out.ScaleZ = float32(in.Float32())
		case "position_x":
			out.PositionX = float32(in.Float32())
		case "position_y":
			out.PositionY = float32(in.Float32())
		case "position_z":
			out.PositionZ = float32(in.Float32())
		case "form":
			out.Form = float32(in.Float32())
		case "oxygen":
			out.Oxygen = float32(in.Float32())
		case "gemoglob":
			out.Gemoglob = float32(in.Float32())
		case "add":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Add).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComGoParkMailRu20191EscapadeEryModels7(out *jwriter.Writer, in Erythrocyte) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int32(int32(in.ID))
	}
	{
		const prefix string = ",\"user_id\":"
		out.RawString(prefix)
		out.Int32(int32(in.UserID))
	}
	{
		const prefix string = ",\"texture_id\":"
		out.RawString(prefix)
		out.Int32(int32(in.TextureID))
	}
	{
		const prefix string = ",\"form_id\":"
		out.RawString(prefix)
		out.Int32(int32(in.FormID))
	}
	{
		const prefix string = ",\"scene_id\":"
		out.RawString(prefix)
		out.Int32(int32(in.SceneID))
	}
	{
		const prefix string = ",\"disease_id\":"
		out.RawString(prefix)
		out.Int32(int32(in.DiseaseID))
	}
	{
		const prefix string = ",\"size_x\":"
		out.RawString(prefix)
		out.Float32(float32(in.SizeX))
	}
	{
		const prefix string = ",\"size_y\":"
		out.RawString(prefix)
		out.Float32(float32(in.SizeY))
	}
	{
		const prefix string = ",\"size_z\":"
		out.RawString(prefix)
		out.Float32(float32(in.SizeZ))
	}
	{
		const prefix string = ",\"angle_x\":"
		out.RawString(prefix)
		out.Float32(float32(in.AngleX))
	}
	{
		const prefix string = ",\"angle_y\":"
		out.RawString(prefix)
		out.Float32(float32(in.AngleY))
	}
	{
		const prefix string = ",\"angle_z\":"
		out.RawString(prefix)
		out.Float32(float32(in.AngleZ))
	}
	{
		const prefix string = ",\"scale_x\":"
		out.RawString(prefix)
		out.Float32(float32(in.ScaleX))
	}
	{
		const prefix string = ",\"scale_y\":"
		out.RawString(prefix)
		out.Float32(float32(in.ScaleY))
	}
	{
		const prefix string = ",\"scale_z\":"
		out.RawString(prefix)
		out.Float32(float32(in.ScaleZ))
	}
	{
		const prefix string = ",\"position_x\":"
		out.RawString(prefix)
		out.Float32(float32(in.PositionX))
	}
	{
		const prefix string = ",\"position_y\":"
		out.RawString(prefix)
		out.Float32(float32(in.PositionY))
	}
	{
		const prefix string = ",\"position_z\":"
		out.RawString(prefix)
		out.Float32(float32(in.PositionZ))
	}
	{
		const prefix string = ",\"form\":"
		out.RawString(prefix)
		out.Float32(float32(in.Form))
	}
	{
		const prefix string = ",\"oxygen\":"
		out.RawString(prefix)
		out.Float32(float32(in.Oxygen))
	}
	{
		const prefix string = ",\"gemoglob\":"
		out.RawString(prefix)
		out.Float32(float32(in.Gemoglob))
	}
	{
		const prefix string = ",\"add\":"
		out.RawString(prefix)
		out.Raw((in.Add).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Erythrocyte) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20191EscapadeEryModels7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Erythrocyte) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20191EscapadeEryModels7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Erythrocyte) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20191EscapadeEryModels7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Erythrocyte) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20191EscapadeEryModels7(l, v)
}
func easyjsonD2b7633eDecodeGithubComGoParkMailRu20191EscapadeEryModels8(in *jlexer.Lexer, out *EryObject) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int32(in.Int32())
		case "user_id":
			out.UserID = int32(in.Int32())
		case "scene_id":
			out.SceneID = int32(in.Int32())
		case "name":
			out.Name = string(in.String())
		case "path":
			out.Path = string(in.String())
		case "about":
			out.About = string(in.String())
		case "source":
			out.Source = string(in.String())
		case "is_form":
			out.IsForm = bool(in.Bool())
		case "is_texture":
			out.IsTexture = bool(in.Bool())
		case "is_image":
			out.IsImage = bool(in.Bool())
		case "public":
			out.Public = bool(in.Bool())
		case "add":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Add).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComGoParkMailRu20191EscapadeEryModels8(out *jwriter.Writer, in EryObject) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int32(int32(in.ID))
	}
	{
		const prefix string = ",\"user_id\":"
		out.RawString(prefix)
		out.Int32(int32(in.UserID))
	}
	{
		const prefix string = ",\"scene_id\":"
		out.RawString(prefix)
		out.Int32(int32(in.SceneID))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"path\":"
		out.RawString(prefix)
		out.String(string(in.Path))
	}
	{
		const prefix string = ",\"about\":"
		out.RawString(prefix)
		out.String(string(in.About))
	}
	{
		const prefix string = ",\"source\":"
		out.RawString(prefix)
		out.String(string(in.Source))
	}
	{
		const prefix string = ",\"is_form\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsForm))
	}
	{
		const prefix string = ",\"is_texture\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsTexture))
	}
	{
		const prefix string = ",\"is_image\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsImage))
	}
	{
		const prefix string = ",\"public\":"
		out.RawString(prefix)
		out.Bool(bool(in.Public))
	}
	{
		const prefix string = ",\"add\":"
		out.RawString(prefix)
		out.Raw((in.Add).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v EryObject) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20191EscapadeEryModels8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EryObject) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20191EscapadeEryModels8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *EryObject) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20191EscapadeEryModels8(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EryObject) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20191EscapadeEryModels8(l, v)
}
func easyjsonD2b7633eDecodeGithubComGoParkMailRu20191EscapadeEryModels9(in *jlexer.Lexer, out *Disease) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int32(in.Int32())
		case "user_id":
			out.UserID = int32(in.Int32())
		case "scene_id":
			out.SceneID = int32(in.Int32())
		case "form":
			out.Form = float32(in.Float32())
		case "oxygen":
			out.Oxygen = float32(in.Float32())
		case "gemoglob":
			out.Gemoglob = float32(in.Float32())
		case "add":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Add).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComGoParkMailRu20191EscapadeEryModels9(out *jwriter.Writer, in Disease) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int32(int32(in.ID))
	}
	{
		const prefix string = ",\"user_id\":"
		out.RawString(prefix)
		out.Int32(int32(in.UserID))
	}
	{
		const prefix string = ",\"scene_id\":"
		out.RawString(prefix)
		out.Int32(int32(in.SceneID))
	}
	{
		const prefix string = ",\"form\":"
		out.RawString(prefix)
		out.Float32(float32(in.Form))
	}
	{
		const prefix string = ",\"oxygen\":"
		out.RawString(prefix)
		out.Float32(float32(in.Oxygen))
	}
	{
		const prefix string = ",\"gemoglob\":"
		out.RawString(prefix)
		out.Float32(float32(in.Gemoglob))
	}
	{
		const prefix string = ",\"add\":"
		out.RawString(prefix)
		out.Raw((in.Add).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Disease) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20191EscapadeEryModels9(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Disease) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20191EscapadeEryModels9(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Disease) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20191EscapadeEryModels9(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Disease) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20191EscapadeEryModels9(l, v)
}
func easyjsonD2b7633eDecodeGithubComGoParkMailRu20191EscapadeEryModels10(in *jlexer.Lexer, out *SceneObjects) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "erythrocytes":
			if in.IsNull() {
				in.Skip()
				out.Erythrocytes = nil
			} else {
				in.Delim('[')
				if out.Erythrocytes == nil {
					if !in.IsDelim(']') {
						out.Erythrocytes = make([]Erythrocyte, 0, 1)
					} else {
						out.Erythrocytes = []Erythrocyte{}
					}
				} else {
					out.Erythrocytes = (out.Erythrocytes)[:0]
				}
				for !in.IsDelim(']') {
					var v13 Erythrocyte
					if data := in.Raw(); in.Ok() {
						in.AddError((v13).UnmarshalJSON(data))
					}
					out.Erythrocytes = append(out.Erythrocytes, v13)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "files":
			if in.IsNull() {
				in.Skip()
				out.Files = nil
			} else {
				in.Delim('[')
				if out.Files == nil {
					if !in.IsDelim(']') {
						out.Files = make([]EryObject, 0, 1)
					} else {
						out.Files = []EryObject{}
					}
				} else {
					out.Files = (out.Files)[:0]
				}
				for !in.IsDelim(']') {
					var v14 EryObject
					if data := in.Raw(); in.Ok() {
						in.AddError((v14).UnmarshalJSON(data))
					}
					out.Files = append(out.Files, v14)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "diseases":
			if in.IsNull() {
				in.Skip()
				out.Diseases = nil
			} else {
				in.Delim('[')
				if out.Diseases == nil {
					if !in.IsDelim(']') {
						out.Diseases = make([]Disease, 0, 1)
					} else {
						out.Diseases = []Disease{}
					}
				} else {
					out.Diseases = (out.Diseases)[:0]
				}
				for !in.IsDelim(']') {
					var v15 Disease
					if data := in.Raw(); in.Ok() {
						in.AddError((v15).UnmarshalJSON(data))
					}
					out.Diseases = append(out.Diseases, v15)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComGoParkMailRu20191EscapadeEryModels10(out *jwriter.Writer, in SceneObjects) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"erythrocytes\":"
		out.RawString(prefix[1:])
		if in.Erythrocytes == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v16, v17 := range in.Erythrocytes {
				if v16 > 0 {
					out.RawByte(',')
				}
				out.Raw((v17).MarshalJSON())
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"files\":"
		out.RawString(prefix)
		if in.Files == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v18, v19 := range in.Files {
				if v18 > 0 {
					out.RawByte(',')
				}
				out.Raw((v19).MarshalJSON())
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"diseases\":"
		out.RawString(prefix)
		if in.Diseases == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v20, v21 := range in.Diseases {
				if v20 > 0 {
					out.RawByte(',')
				}
				out.Raw((v21).MarshalJSON())
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SceneObjects) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20191EscapadeEryModels10(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SceneObjects) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20191EscapadeEryModels10(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SceneObjects) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20191EscapadeEryModels10(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SceneObjects) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20191EscapadeEryModels10(l, v)
}
func easyjsonD2b7633eDecodeGithubComGoParkMailRu20191EscapadeEryModels11(in *jlexer.Lexer, out *Scene) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int32(in.Int32())
		case "user_id":
			out.UserID = int32(in.Int32())
		case "user_name":
			out.UserName = string(in.String())
		case "user_photo":
			out.UserPhoto = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "about":
			out.About = string(in.String())
		case "project_id":
			out.ProjectID = int32(in.Int32())
		case "edit":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Edit).UnmarshalJSON(data))
			}
		case "editor_id":
			out.EditorID = int32(in.Int32())
		case "add":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Add).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComGoParkMailRu20191EscapadeEryModels11(out *jwriter.Writer, in Scene) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int32(int32(in.ID))
	}
	{
		const prefix string = ",\"user_id\":"
		out.RawString(prefix)
		out.Int32(int32(in.UserID))
	}
	{
		const prefix string = ",\"user_name\":"
		out.RawString(prefix)
		out.String(string(in.UserName))
	}
	{
		const prefix string = ",\"user_photo\":"
		out.RawString(prefix)
		out.String(string(in.UserPhoto))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"about\":"
		out.RawString(prefix)
		out.String(string(in.About))
	}
	{
		const prefix string = ",\"project_id\":"
		out.RawString(prefix)
		out.Int32(int32(in.ProjectID))
	}
	{
		const prefix string = ",\"edit\":"
		out.RawString(prefix)
		out.Raw((in.Edit).MarshalJSON())
	}
	{
		const prefix string = ",\"editor_id\":"
		out.RawString(prefix)
		out.Int32(int32(in.EditorID))
	}
	{
		const prefix string = ",\"add\":"
		out.RawString(prefix)
		out.Raw((in.Add).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Scene) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20191EscapadeEryModels11(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Scene) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20191EscapadeEryModels11(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Scene) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20191EscapadeEryModels11(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Scene) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20191EscapadeEryModels11(l, v)
}
func easyjsonD2b7633eDecodeGithubComGoParkMailRu20191EscapadeEryModels12(in *jlexer.Lexer, out *UpdatePrivateUser) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "old":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Old).UnmarshalJSON(data))
			}
		case "new":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.New).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComGoParkMailRu20191EscapadeEryModels12(out *jwriter.Writer, in UpdatePrivateUser) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"old\":"
		out.RawString(prefix[1:])
		out.Raw((in.Old).MarshalJSON())
	}
	{
		const prefix string = ",\"new\":"
		out.RawString(prefix)
		out.Raw((in.New).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UpdatePrivateUser) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20191EscapadeEryModels12(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UpdatePrivateUser) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20191EscapadeEryModels12(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UpdatePrivateUser) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20191EscapadeEryModels12(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UpdatePrivateUser) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20191EscapadeEryModels12(l, v)
}
func easyjsonD2b7633eDecodeGithubComGoParkMailRu20191EscapadeEryModels13(in *jlexer.Lexer, out *Users) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "users":
			if in.IsNull() {
				in.Skip()
				out.Users = nil
			} else {
				in.Delim('[')
				if out.Users == nil {
					if !in.IsDelim(']') {
						out.Users = make([]User, 0, 1)
					} else {
						out.Users = []User{}
					}
				} else {
					out.Users = (out.Users)[:0]
				}
				for !in.IsDelim(']') {
					var v22 User
					if data := in.Raw(); in.Ok() {
						in.AddError((v22).UnmarshalJSON(data))
					}
					out.Users = append(out.Users, v22)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComGoParkMailRu20191EscapadeEryModels13(out *jwriter.Writer, in Users) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"users\":"
		out.RawString(prefix[1:])
		if in.Users == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v23, v24 := range in.Users {
				if v23 > 0 {
					out.RawByte(',')
				}
				out.Raw((v24).MarshalJSON())
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Users) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20191EscapadeEryModels13(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Users) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20191EscapadeEryModels13(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Users) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20191EscapadeEryModels13(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Users) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20191EscapadeEryModels13(l, v)
}
func easyjsonD2b7633eDecodeGithubComGoParkMailRu20191EscapadeEryModels14(in *jlexer.Lexer, out *User) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int32(in.Int32())
		case "name":
			out.Name = string(in.String())
		case "password":
			out.Password = string(in.String())
		case "photo_title":
			out.PhotoTitle = string(in.String())
		case "website":
			easyjsonD2b7633eDecodeDatabaseSql(in, &out.Website)
		case "about":
			easyjsonD2b7633eDecodeDatabaseSql(in, &out.About)
		case "email":
			easyjsonD2b7633eDecodeDatabaseSql(in, &out.Email)
		case "phone":
			easyjsonD2b7633eDecodeDatabaseSql(in, &out.Phone)
		case "birthday":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Birthday).UnmarshalJSON(data))
			}
		case "add":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Add).UnmarshalJSON(data))
			}
		case "last_seen":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.LastSeen).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComGoParkMailRu20191EscapadeEryModels14(out *jwriter.Writer, in User) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int32(int32(in.ID))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"password\":"
		out.RawString(prefix)
		out.String(string(in.Password))
	}
	{
		const prefix string = ",\"photo_title\":"
		out.RawString(prefix)
		out.String(string(in.PhotoTitle))
	}
	{
		const prefix string = ",\"website\":"
		out.RawString(prefix)
		easyjsonD2b7633eEncodeDatabaseSql(out, in.Website)
	}
	{
		const prefix string = ",\"about\":"
		out.RawString(prefix)
		easyjsonD2b7633eEncodeDatabaseSql(out, in.About)
	}
	{
		const prefix string = ",\"email\":"
		out.RawString(prefix)
		easyjsonD2b7633eEncodeDatabaseSql(out, in.Email)
	}
	{
		const prefix string = ",\"phone\":"
		out.RawString(prefix)
		easyjsonD2b7633eEncodeDatabaseSql(out, in.Phone)
	}
	{
		const prefix string = ",\"birthday\":"
		out.RawString(prefix)
		out.Raw((in.Birthday).MarshalJSON())
	}
	{
		const prefix string = ",\"add\":"
		out.RawString(prefix)
		out.Raw((in.Add).MarshalJSON())
	}
	{
		const prefix string = ",\"last_seen\":"
		out.RawString(prefix)
		out.Raw((in.LastSeen).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v User) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20191EscapadeEryModels14(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v User) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20191EscapadeEryModels14(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *User) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20191EscapadeEryModels14(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *User) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20191EscapadeEryModels14(l, v)
}
