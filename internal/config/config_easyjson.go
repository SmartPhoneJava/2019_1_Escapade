// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package config

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
	time "time"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson6615c02eDecodeGithubComGoParkMailRu20191EscapadeInternalConfig(in *jlexer.Lexer, out *WebSocketSettings) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "writeWait":
			out.WriteWait = time.Duration(in.Int64())
		case "pongWait":
			out.PongWait = time.Duration(in.Int64())
		case "pingPeriod":
			out.PingPeriod = time.Duration(in.Int64())
		case "maxMessageSize":
			out.MaxMessageSize = int64(in.Int64())
		case "readBufferSize":
			out.ReadBufferSize = int(in.Int())
		case "writeBufferSize":
			out.WriteBufferSize = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6615c02eEncodeGithubComGoParkMailRu20191EscapadeInternalConfig(out *jwriter.Writer, in WebSocketSettings) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"writeWait\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.WriteWait))
	}
	{
		const prefix string = ",\"pongWait\":"
		out.RawString(prefix)
		out.Int64(int64(in.PongWait))
	}
	{
		const prefix string = ",\"pingPeriod\":"
		out.RawString(prefix)
		out.Int64(int64(in.PingPeriod))
	}
	{
		const prefix string = ",\"maxMessageSize\":"
		out.RawString(prefix)
		out.Int64(int64(in.MaxMessageSize))
	}
	{
		const prefix string = ",\"readBufferSize\":"
		out.RawString(prefix)
		out.Int(int(in.ReadBufferSize))
	}
	{
		const prefix string = ",\"writeBufferSize\":"
		out.RawString(prefix)
		out.Int(int(in.WriteBufferSize))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v WebSocketSettings) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6615c02eEncodeGithubComGoParkMailRu20191EscapadeInternalConfig(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v WebSocketSettings) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6615c02eEncodeGithubComGoParkMailRu20191EscapadeInternalConfig(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *WebSocketSettings) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6615c02eDecodeGithubComGoParkMailRu20191EscapadeInternalConfig(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *WebSocketSettings) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6615c02eDecodeGithubComGoParkMailRu20191EscapadeInternalConfig(l, v)
}
func easyjson6615c02eDecodeGithubComGoParkMailRu20191EscapadeInternalConfig1(in *jlexer.Lexer, out *WebSocketConfig) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "writeWait":
			out.WriteWait = int(in.Int())
		case "pongWait":
			out.PongWait = int(in.Int())
		case "pingPeriod":
			out.PingPeriod = int(in.Int())
		case "maxMessageSize":
			out.MaxMessageSize = int64(in.Int64())
		case "readBufferSize":
			out.ReadBufferSize = int(in.Int())
		case "writeBufferSize":
			out.WriteBufferSize = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6615c02eEncodeGithubComGoParkMailRu20191EscapadeInternalConfig1(out *jwriter.Writer, in WebSocketConfig) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"writeWait\":"
		out.RawString(prefix[1:])
		out.Int(int(in.WriteWait))
	}
	{
		const prefix string = ",\"pongWait\":"
		out.RawString(prefix)
		out.Int(int(in.PongWait))
	}
	{
		const prefix string = ",\"pingPeriod\":"
		out.RawString(prefix)
		out.Int(int(in.PingPeriod))
	}
	{
		const prefix string = ",\"maxMessageSize\":"
		out.RawString(prefix)
		out.Int64(int64(in.MaxMessageSize))
	}
	{
		const prefix string = ",\"readBufferSize\":"
		out.RawString(prefix)
		out.Int(int(in.ReadBufferSize))
	}
	{
		const prefix string = ",\"writeBufferSize\":"
		out.RawString(prefix)
		out.Int(int(in.WriteBufferSize))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v WebSocketConfig) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6615c02eEncodeGithubComGoParkMailRu20191EscapadeInternalConfig1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v WebSocketConfig) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6615c02eEncodeGithubComGoParkMailRu20191EscapadeInternalConfig1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *WebSocketConfig) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6615c02eDecodeGithubComGoParkMailRu20191EscapadeInternalConfig1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *WebSocketConfig) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6615c02eDecodeGithubComGoParkMailRu20191EscapadeInternalConfig1(l, v)
}
func easyjson6615c02eDecodeGithubComGoParkMailRu20191EscapadeInternalConfig2(in *jlexer.Lexer, out *SessionConfig) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "path":
			out.Path = string(in.String())
		case "length":
			out.Length = int(in.Int())
		case "lifetime":
			out.LifetimeSeconds = int(in.Int())
		case "httpOnly":
			out.HTTPOnly = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6615c02eEncodeGithubComGoParkMailRu20191EscapadeInternalConfig2(out *jwriter.Writer, in SessionConfig) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"path\":"
		out.RawString(prefix)
		out.String(string(in.Path))
	}
	{
		const prefix string = ",\"length\":"
		out.RawString(prefix)
		out.Int(int(in.Length))
	}
	{
		const prefix string = ",\"lifetime\":"
		out.RawString(prefix)
		out.Int(int(in.LifetimeSeconds))
	}
	{
		const prefix string = ",\"httpOnly\":"
		out.RawString(prefix)
		out.Bool(bool(in.HTTPOnly))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SessionConfig) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6615c02eEncodeGithubComGoParkMailRu20191EscapadeInternalConfig2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SessionConfig) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6615c02eEncodeGithubComGoParkMailRu20191EscapadeInternalConfig2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SessionConfig) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6615c02eDecodeGithubComGoParkMailRu20191EscapadeInternalConfig2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SessionConfig) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6615c02eDecodeGithubComGoParkMailRu20191EscapadeInternalConfig2(l, v)
}
func easyjson6615c02eDecodeGithubComGoParkMailRu20191EscapadeInternalConfig3(in *jlexer.Lexer, out *AuthClient) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "url":
			out.URL = string(in.String())
		case "address":
			out.Address = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6615c02eEncodeGithubComGoParkMailRu20191EscapadeInternalConfig3(out *jwriter.Writer, in AuthClient) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"url\":"
		out.RawString(prefix[1:])
		out.String(string(in.URL))
	}
	{
		const prefix string = ",\"address\":"
		out.RawString(prefix)
		out.String(string(in.Address))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AuthClient) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6615c02eEncodeGithubComGoParkMailRu20191EscapadeInternalConfig3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AuthClient) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6615c02eEncodeGithubComGoParkMailRu20191EscapadeInternalConfig3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AuthClient) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6615c02eDecodeGithubComGoParkMailRu20191EscapadeInternalConfig3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AuthClient) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6615c02eDecodeGithubComGoParkMailRu20191EscapadeInternalConfig3(l, v)
}
func easyjson6615c02eDecodeGithubComGoParkMailRu20191EscapadeInternalConfig4(in *jlexer.Lexer, out *GameConfig) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "roomsCapacity":
			out.RoomsCapacity = int(in.Int())
		case "connectionCapacity":
			out.ConnectionCapacity = int(in.Int())
		case "location":
			out.Location = string(in.String())
		case "closeRoom":
			out.CanClose = bool(in.Bool())
		case "metrics":
			out.Metrics = bool(in.Bool())
		case "field":
			if in.IsNull() {
				in.Skip()
				out.Field = nil
			} else {
				if out.Field == nil {
					out.Field = new(FieldConfig)
				}
				(*out.Field).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6615c02eEncodeGithubComGoParkMailRu20191EscapadeInternalConfig4(out *jwriter.Writer, in GameConfig) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"roomsCapacity\":"
		out.RawString(prefix[1:])
		out.Int(int(in.RoomsCapacity))
	}
	{
		const prefix string = ",\"connectionCapacity\":"
		out.RawString(prefix)
		out.Int(int(in.ConnectionCapacity))
	}
	{
		const prefix string = ",\"location\":"
		out.RawString(prefix)
		out.String(string(in.Location))
	}
	{
		const prefix string = ",\"closeRoom\":"
		out.RawString(prefix)
		out.Bool(bool(in.CanClose))
	}
	{
		const prefix string = ",\"metrics\":"
		out.RawString(prefix)
		out.Bool(bool(in.Metrics))
	}
	{
		const prefix string = ",\"field\":"
		out.RawString(prefix)
		if in.Field == nil {
			out.RawString("null")
		} else {
			(*in.Field).MarshalEasyJSON(out)
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GameConfig) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6615c02eEncodeGithubComGoParkMailRu20191EscapadeInternalConfig4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GameConfig) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6615c02eEncodeGithubComGoParkMailRu20191EscapadeInternalConfig4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GameConfig) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6615c02eDecodeGithubComGoParkMailRu20191EscapadeInternalConfig4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GameConfig) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6615c02eDecodeGithubComGoParkMailRu20191EscapadeInternalConfig4(l, v)
}
func easyjson6615c02eDecodeGithubComGoParkMailRu20191EscapadeInternalConfig5(in *jlexer.Lexer, out *FieldConfig) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "minAreaSize":
			out.MinAreaSize = int(in.Int())
		case "maxAreaSize":
			out.MaxAreaSize = int(in.Int())
		case "minProbability":
			out.MinProbability = int(in.Int())
		case "maxProbability":
			out.MaxProbability = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6615c02eEncodeGithubComGoParkMailRu20191EscapadeInternalConfig5(out *jwriter.Writer, in FieldConfig) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"minAreaSize\":"
		out.RawString(prefix[1:])
		out.Int(int(in.MinAreaSize))
	}
	{
		const prefix string = ",\"maxAreaSize\":"
		out.RawString(prefix)
		out.Int(int(in.MaxAreaSize))
	}
	{
		const prefix string = ",\"minProbability\":"
		out.RawString(prefix)
		out.Int(int(in.MinProbability))
	}
	{
		const prefix string = ",\"maxProbability\":"
		out.RawString(prefix)
		out.Int(int(in.MaxProbability))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v FieldConfig) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6615c02eEncodeGithubComGoParkMailRu20191EscapadeInternalConfig5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v FieldConfig) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6615c02eEncodeGithubComGoParkMailRu20191EscapadeInternalConfig5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *FieldConfig) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6615c02eDecodeGithubComGoParkMailRu20191EscapadeInternalConfig5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *FieldConfig) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6615c02eDecodeGithubComGoParkMailRu20191EscapadeInternalConfig5(l, v)
}
func easyjson6615c02eDecodeGithubComGoParkMailRu20191EscapadeInternalConfig6(in *jlexer.Lexer, out *DatabaseConfig) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "driverName":
			out.DriverName = string(in.String())
		case "url":
			out.URL = string(in.String())
		case "connectionString":
			out.ConnectionString = string(in.String())
		case "maxOpenConns":
			out.MaxOpenConns = int(in.Int())
		case "pageGames":
			out.PageGames = int(in.Int())
		case "pageUsers":
			out.PageUsers = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6615c02eEncodeGithubComGoParkMailRu20191EscapadeInternalConfig6(out *jwriter.Writer, in DatabaseConfig) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"driverName\":"
		out.RawString(prefix[1:])
		out.String(string(in.DriverName))
	}
	{
		const prefix string = ",\"url\":"
		out.RawString(prefix)
		out.String(string(in.URL))
	}
	{
		const prefix string = ",\"connectionString\":"
		out.RawString(prefix)
		out.String(string(in.ConnectionString))
	}
	{
		const prefix string = ",\"maxOpenConns\":"
		out.RawString(prefix)
		out.Int(int(in.MaxOpenConns))
	}
	{
		const prefix string = ",\"pageGames\":"
		out.RawString(prefix)
		out.Int(int(in.PageGames))
	}
	{
		const prefix string = ",\"pageUsers\":"
		out.RawString(prefix)
		out.Int(int(in.PageUsers))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v DatabaseConfig) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6615c02eEncodeGithubComGoParkMailRu20191EscapadeInternalConfig6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DatabaseConfig) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6615c02eEncodeGithubComGoParkMailRu20191EscapadeInternalConfig6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *DatabaseConfig) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6615c02eDecodeGithubComGoParkMailRu20191EscapadeInternalConfig6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DatabaseConfig) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6615c02eDecodeGithubComGoParkMailRu20191EscapadeInternalConfig6(l, v)
}
func easyjson6615c02eDecodeGithubComGoParkMailRu20191EscapadeInternalConfig7(in *jlexer.Lexer, out *CORSConfig) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "origins":
			if in.IsNull() {
				in.Skip()
				out.Origins = nil
			} else {
				in.Delim('[')
				if out.Origins == nil {
					if !in.IsDelim(']') {
						out.Origins = make([]string, 0, 4)
					} else {
						out.Origins = []string{}
					}
				} else {
					out.Origins = (out.Origins)[:0]
				}
				for !in.IsDelim(']') {
					var v1 string
					v1 = string(in.String())
					out.Origins = append(out.Origins, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "headers":
			if in.IsNull() {
				in.Skip()
				out.Headers = nil
			} else {
				in.Delim('[')
				if out.Headers == nil {
					if !in.IsDelim(']') {
						out.Headers = make([]string, 0, 4)
					} else {
						out.Headers = []string{}
					}
				} else {
					out.Headers = (out.Headers)[:0]
				}
				for !in.IsDelim(']') {
					var v2 string
					v2 = string(in.String())
					out.Headers = append(out.Headers, v2)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "credentials":
			out.Credentials = string(in.String())
		case "methods":
			if in.IsNull() {
				in.Skip()
				out.Methods = nil
			} else {
				in.Delim('[')
				if out.Methods == nil {
					if !in.IsDelim(']') {
						out.Methods = make([]string, 0, 4)
					} else {
						out.Methods = []string{}
					}
				} else {
					out.Methods = (out.Methods)[:0]
				}
				for !in.IsDelim(']') {
					var v3 string
					v3 = string(in.String())
					out.Methods = append(out.Methods, v3)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6615c02eEncodeGithubComGoParkMailRu20191EscapadeInternalConfig7(out *jwriter.Writer, in CORSConfig) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"origins\":"
		out.RawString(prefix[1:])
		if in.Origins == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v4, v5 := range in.Origins {
				if v4 > 0 {
					out.RawByte(',')
				}
				out.String(string(v5))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"headers\":"
		out.RawString(prefix)
		if in.Headers == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v6, v7 := range in.Headers {
				if v6 > 0 {
					out.RawByte(',')
				}
				out.String(string(v7))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"credentials\":"
		out.RawString(prefix)
		out.String(string(in.Credentials))
	}
	{
		const prefix string = ",\"methods\":"
		out.RawString(prefix)
		if in.Methods == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v8, v9 := range in.Methods {
				if v8 > 0 {
					out.RawByte(',')
				}
				out.String(string(v9))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CORSConfig) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6615c02eEncodeGithubComGoParkMailRu20191EscapadeInternalConfig7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CORSConfig) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6615c02eEncodeGithubComGoParkMailRu20191EscapadeInternalConfig7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CORSConfig) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6615c02eDecodeGithubComGoParkMailRu20191EscapadeInternalConfig7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CORSConfig) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6615c02eDecodeGithubComGoParkMailRu20191EscapadeInternalConfig7(l, v)
}
func easyjson6615c02eDecodeGithubComGoParkMailRu20191EscapadeInternalConfig8(in *jlexer.Lexer, out *ServerConfig) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "host":
			out.Host = string(in.String())
		case "portUrl":
			out.PortURL = string(in.String())
		case "portValue":
			out.PortValue = string(in.String())
		case "readTimeoutS":
			out.ReadTimeoutS = int(in.Int())
		case "writeTimeoutS":
			out.WriteTimeoutS = int(in.Int())
		case "idleTimeoutS":
			out.IdleTimeoutS = int(in.Int())
		case "waitTimeoutS":
			out.WaitTimeoutS = int(in.Int())
		case "execTimeoutS":
			out.ExecTimeoutS = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6615c02eEncodeGithubComGoParkMailRu20191EscapadeInternalConfig8(out *jwriter.Writer, in ServerConfig) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"host\":"
		out.RawString(prefix[1:])
		out.String(string(in.Host))
	}
	{
		const prefix string = ",\"portUrl\":"
		out.RawString(prefix)
		out.String(string(in.PortURL))
	}
	{
		const prefix string = ",\"portValue\":"
		out.RawString(prefix)
		out.String(string(in.PortValue))
	}
	{
		const prefix string = ",\"readTimeoutS\":"
		out.RawString(prefix)
		out.Int(int(in.ReadTimeoutS))
	}
	{
		const prefix string = ",\"writeTimeoutS\":"
		out.RawString(prefix)
		out.Int(int(in.WriteTimeoutS))
	}
	{
		const prefix string = ",\"idleTimeoutS\":"
		out.RawString(prefix)
		out.Int(int(in.IdleTimeoutS))
	}
	{
		const prefix string = ",\"waitTimeoutS\":"
		out.RawString(prefix)
		out.Int(int(in.WaitTimeoutS))
	}
	{
		const prefix string = ",\"execTimeoutS\":"
		out.RawString(prefix)
		out.Int(int(in.ExecTimeoutS))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ServerConfig) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6615c02eEncodeGithubComGoParkMailRu20191EscapadeInternalConfig8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ServerConfig) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6615c02eEncodeGithubComGoParkMailRu20191EscapadeInternalConfig8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ServerConfig) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6615c02eDecodeGithubComGoParkMailRu20191EscapadeInternalConfig8(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ServerConfig) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6615c02eDecodeGithubComGoParkMailRu20191EscapadeInternalConfig8(l, v)
}
func easyjson6615c02eDecodeGithubComGoParkMailRu20191EscapadeInternalConfig9(in *jlexer.Lexer, out *Configuration) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "server":
			(out.Server).UnmarshalEasyJSON(in)
		case "cors":
			(out.Cors).UnmarshalEasyJSON(in)
		case "dataBase":
			(out.DataBase).UnmarshalEasyJSON(in)
		case "game":
			(out.Game).UnmarshalEasyJSON(in)
		case "session":
			(out.Session).UnmarshalEasyJSON(in)
		case "websocket":
			(out.WebSocket).UnmarshalEasyJSON(in)
		case "authClient":
			(out.AuthClient).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6615c02eEncodeGithubComGoParkMailRu20191EscapadeInternalConfig9(out *jwriter.Writer, in Configuration) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"server\":"
		out.RawString(prefix[1:])
		(in.Server).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"cors\":"
		out.RawString(prefix)
		(in.Cors).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"dataBase\":"
		out.RawString(prefix)
		(in.DataBase).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"game\":"
		out.RawString(prefix)
		(in.Game).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"session\":"
		out.RawString(prefix)
		(in.Session).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"websocket\":"
		out.RawString(prefix)
		(in.WebSocket).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"authClient\":"
		out.RawString(prefix)
		(in.AuthClient).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Configuration) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6615c02eEncodeGithubComGoParkMailRu20191EscapadeInternalConfig9(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Configuration) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6615c02eEncodeGithubComGoParkMailRu20191EscapadeInternalConfig9(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Configuration) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6615c02eDecodeGithubComGoParkMailRu20191EscapadeInternalConfig9(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Configuration) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6615c02eDecodeGithubComGoParkMailRu20191EscapadeInternalConfig9(l, v)
}
