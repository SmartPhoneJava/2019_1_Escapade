package main

import (
	"net/http"

	api "github.com/go-park-mail-ru/2019_1_Escapade/api/handlers"
	"github.com/go-park-mail-ru/2019_1_Escapade/internal/config"
	"github.com/go-park-mail-ru/2019_1_Escapade/internal/metrics"
	"github.com/go-park-mail-ru/2019_1_Escapade/internal/router"
	"github.com/go-park-mail-ru/2019_1_Escapade/internal/utils"

	_ "github.com/go-park-mail-ru/2019_1_Escapade/docs"
	//_ "github.com/swaggo/http-swagger/example/go-chi/docs" // docs is generated by Swag CLI, you have to import it.
	//_ "github.com/swaggo/http-swagger/example/go-chi/docs" // docs is generated by Swag CLI, you have to import it.
)

// to generate docs, call from root "swag init -g api/main.go"

// @title Escapade Explosion API
// @version 1.0
// @description API documentation

// @host https://explosion.team
// @BasePath /api
func main() {
	const (
		place      = "main"
		confPath   = "api/api.json"
		secretPath = "secret.json"
	)

	var (
		configuration *config.Configuration
		API           *api.Handler
		err           error
	)

	metrics.InitApi()

	// logger, err := zap.NewProduction()
	// if err != nil {
	// 	log.Fatal("Zap logger error:", err)
	// 	return
	// }
	// defer logger.Sync()

	if configuration, err = config.InitPublic(confPath); err != nil {
		utils.Debug(false, "cant init configuration in api service", err.Error())
		return
	}
	config.InitPrivate(secretPath)

	//review: бесполезный комментарий
	/*
		authConn, err := clients.ServiceConnectionsInit(configuration.AuthClient)
		if err != nil {
			log.Fatal("serviceConnectionsInit error:", err)
		}
		defer authConn.Close()
	*/
	API, err = api.GetAPIHandler(configuration /*, authConn*/) // init.go

	if err != nil {
		utils.PrintResult(err, 0, "main")
		return
	}
	//API.RandomUsers(10) // create 10 users for tests
	port := router.GetPort(configuration)
	r := router.GetRouter(API, port, configuration)

	if err = http.ListenAndServe(port, r); err != nil {
		utils.PrintResult(err, 0, "main")
	}
}
