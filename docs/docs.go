// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag at
// 2019-07-23 14:17:16.510734216 +0300 MSK m=+6.028483761

package docs

import (
	"bytes"
	"encoding/json"

	"github.com/alecthomas/template"
	"github.com/swaggo/swag"
)

var doc = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{.Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "license": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/avatar": {
            "get": {
                "description": "Get user avatar",
                "summary": "Get user avatar",
                "operationId": "GetImage",
                "responses": {
                    "200": {
                        "description": "Avatar found successfully",
                        "schema": {
                            "$ref": "#/definitions/models.Result"
                        }
                    },
                    "401": {
                        "description": "Required authorization",
                        "schema": {
                            "$ref": "#/definitions/models.Result"
                        }
                    },
                    "404": {
                        "description": "Avatar not found",
                        "schema": {
                            "$ref": "#/definitions/models.Result"
                        }
                    }
                }
            },
            "post": {
                "description": "Create user avatar",
                "summary": "Create user avatar",
                "operationId": "PostImage",
                "responses": {
                    "201": {
                        "description": "Avatar created successfully",
                        "schema": {
                            "$ref": "#/definitions/models.Result"
                        }
                    },
                    "401": {
                        "description": "Required authorization",
                        "schema": {
                            "$ref": "#/definitions/models.Result"
                        }
                    },
                    "500": {
                        "description": "Avatar not found",
                        "schema": {
                            "$ref": "#/definitions/models.Result"
                        }
                    }
                }
            }
        },
        "/session": {
            "post": {
                "description": "login",
                "summary": "login",
                "operationId": "Login",
                "responses": {
                    "200": {
                        "description": "Get successfully",
                        "schema": {
                            "$ref": "#/definitions/models.UserPublicInfo"
                        }
                    },
                    "400": {
                        "description": "invalid name or password",
                        "schema": {
                            "$ref": "#/definitions/models.Result"
                        }
                    },
                    "500": {
                        "description": "server error",
                        "schema": {
                            "$ref": "#/definitions/models.Result"
                        }
                    }
                }
            },
            "delete": {
                "description": "logout",
                "summary": "logout",
                "operationId": "Logout",
                "responses": {
                    "200": {
                        "description": "Get successfully",
                        "schema": {
                            "$ref": "#/definitions/models.Result"
                        }
                    },
                    "401": {
                        "description": "Require authorization",
                        "schema": {
                            "$ref": "#/definitions/models.Result"
                        }
                    },
                    "500": {
                        "description": "server error",
                        "schema": {
                            "$ref": "#/definitions/models.Result"
                        }
                    }
                }
            }
        },
        "/user": {
            "get": {
                "description": "get public information about that user",
                "summary": "get public information about that user",
                "operationId": "GetMyProfile",
                "responses": {
                    "201": {
                        "description": "Create user successfully",
                        "schema": {
                            "$ref": "#/definitions/models.Result"
                        },
                        "headers": {
                            "Token": {
                                "type": "string",
                                "description": "qwerty"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid information",
                        "schema": {
                            "$ref": "#/definitions/models.Result"
                        }
                    }
                }
            },
            "put": {
                "description": "update public info",
                "summary": "update user information",
                "operationId": "UpdateProfile",
                "responses": {
                    "200": {
                        "description": "Get successfully",
                        "schema": {
                            "$ref": "#/definitions/models.Result"
                        }
                    },
                    "400": {
                        "description": "invalid info",
                        "schema": {
                            "$ref": "#/definitions/models.Result"
                        }
                    },
                    "401": {
                        "description": "need authorization",
                        "schema": {
                            "$ref": "#/definitions/models.Result"
                        }
                    }
                }
            },
            "post": {
                "description": "create new user",
                "summary": "create new user",
                "operationId": "Register",
                "responses": {
                    "201": {
                        "description": "Create user successfully",
                        "schema": {
                            "$ref": "#/definitions/models.Result"
                        },
                        "headers": {
                            "Token": {
                                "type": "string",
                                "description": "qwerty"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid information",
                        "schema": {
                            "$ref": "#/definitions/models.Result"
                        }
                    }
                }
            },
            "delete": {
                "description": "delete account",
                "summary": "delete account",
                "operationId": "DeleteAccount",
                "responses": {
                    "200": {
                        "description": "Get successfully",
                        "schema": {
                            "$ref": "#/definitions/models.Result"
                        }
                    },
                    "400": {
                        "description": "invalid input",
                        "schema": {
                            "$ref": "#/definitions/models.Result"
                        }
                    },
                    "500": {
                        "description": "server error",
                        "schema": {
                            "$ref": "#/definitions/models.Result"
                        }
                    }
                }
            },
            "options": {
                "description": "catch CORS preflight",
                "summary": "catch CORS preflight",
                "operationId": "OK1",
                "responses": {
                    "200": {
                        "description": "successfully"
                    }
                }
            }
        },
        "/users/pages_amount": {
            "get": {
                "description": "Get amount of users list page",
                "summary": "amount of users list page",
                "operationId": "GetUsersPageAmount",
                "responses": {
                    "200": {
                        "description": "Get successfully",
                        "schema": {
                            "$ref": "#/definitions/models.Pages"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/models.Result"
                        }
                    }
                }
            }
        },
        "/users/{name}/profile": {
            "get": {
                "description": "get user's best score and best time for a given difficulty, user's id, name and photo",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Get public user inforamtion",
                "operationId": "GetProfile",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User name",
                        "name": "name",
                        "in": "path"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Profile found successfully",
                        "schema": {
                            "$ref": "#/definitions/models.UserPublicInfo"
                        }
                    },
                    "400": {
                        "description": "Invalid username",
                        "schema": {
                            "$ref": "#/definitions/models.Result"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/models.Result"
                        }
                    }
                }
            }
        },
        "/users/{page}": {
            "get": {
                "description": "Get page of user list",
                "summary": "Get users list",
                "operationId": "GetUsers",
                "responses": {
                    "200": {
                        "description": "Get successfully",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Result"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid pade",
                        "schema": {
                            "$ref": "#/definitions/models.Result"
                        }
                    },
                    "404": {
                        "description": "Users not found",
                        "schema": {
                            "$ref": "#/definitions/models.Result"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/models.Result"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "models.Pages": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "integer"
                }
            }
        },
        "models.Result": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                },
                "place": {
                    "type": "string"
                },
                "success": {
                    "type": "boolean"
                }
            }
        },
        "models.UserPublicInfo": {
            "type": "object",
            "properties": {
                "bestScore": {
                    "type": "string"
                },
                "bestTime": {
                    "type": "string"
                },
                "difficult": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "photo": {
                    "type": "string"
                }
            }
        }
    }
}`

type swaggerInfo struct {
	Version     string
	Host        string
	BasePath    string
	Schemes     []string
	Title       string
	Description string
}

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = swaggerInfo{
	Version:     "1.0",
	Host:        "https://explosion.team",
	BasePath:    "/api",
	Schemes:     []string{},
	Title:       "Escapade Explosion API",
	Description: "API documentation",
}

type s struct{}

func (s *s) ReadDoc() string {
	t, err := template.New("swagger_info").Funcs(template.FuncMap{
		"marshal": func(v interface{}) string {
			a, _ := json.Marshal(v)
			return string(a)
		},
	}).Parse(doc)
	if err != nil {
		return doc
	}

	var tpl bytes.Buffer
	if err := t.Execute(&tpl, SwaggerInfo); err != nil {
		return doc
	}

	return tpl.String()
}

func init() {
	swag.Register(swag.Name, &s{})
}
