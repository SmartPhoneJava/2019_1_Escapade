basePath: /api
definitions:
  models.ErrorDescription:
    properties:
      error:
        example: unsupported_grant_type
        type: string
      error_description:
        example: The authorization grant type is not supported by the authorization
          server
        type: string
    type: object
  models.Pages:
    properties:
      amount:
        type: integer
    type: object
  models.Record:
    properties:
      difficult:
        minimum: 0
        type: integer
      onlineTotal:
        minimum: 0
        type: integer
      onlineWin:
        minimum: 0
        type: integer
      score:
        minimum: 0
        type: integer
      singleTotal:
        minimum: 0
        type: integer
      singleWin:
        minimum: 0
        type: integer
      time:
        type: number
    type: object
  models.Result:
    properties:
      message:
        type: string
      place:
        type: string
      success:
        type: boolean
    type: object
  models.SessionToken:
    properties:
      access_token:
        example: "123123123"
        type: string
      expires_in:
        example: 86400
        type: integer
      refresh_token:
        example: "321321321"
        type: string
      token_type:
        example: bearer
        type: string
    type: object
  models.UserPrivateInfo:
    properties:
      name:
        example: John
        maxLength: 30
        type: string
      password:
        example: easyPassword
        maxLength: 30
        minLength: 6
        type: string
    type: object
  models.UserPublicInfo:
    properties:
      bestScore:
        type: string
      bestTime:
        type: string
      difficult:
        type: integer
      id:
        type: integer
      name:
        maxLength: 30
        minLength: 3
        type: string
      photo:
        maxLength: 50
        type: string
    type: object
host: virtserver.swaggerhub.com/SmartPhoneJava/explosion/1.0.0
info:
  contact: {}
  description: We don't have a public API, so instead of a real host(explosion.team)
    we specify localhost:3001. To test the following methods, git clone https://github.com/go-park-mail-ru/2019_1_Escapade,
    enter the root directory and run 'docker-compose up -d'
  license: {}
  title: Escapade Explosion API
  version: "1.0"
paths:
  /avatar:
    post:
      consumes:
      - multipart/form-data
      description: Load new avatar to the current user. The current one is the one
        whose token is provided.
      operationId: PostImage
      parameters:
      - description: account image
        in: formData
        name: file
        required: true
        type: file
      produces:
      - application/json
      responses:
        "201":
          description: Avatar created successfully
          schema:
            $ref: '#/definitions/models.Result'
        "401":
          description: Required authorization
          schema:
            $ref: '#/definitions/models.Result'
        "500":
          description: Avatar not found
          schema:
            $ref: '#/definitions/models.Result'
      security:
      - OAuth2Application:
        - write
      summary: Create user avatar
      tags:
      - account
  /game:
    post:
      consumes:
      - application/json
      description: Save offline game results of current user. The current one is the
        one whose token is provided.
      operationId: OfflineSave
      parameters:
      - description: Results of offline game
        in: body
        name: record
        required: true
        schema:
          $ref: '#/definitions/models.Record'
      produces:
      - application/json
      responses:
        "200":
          description: Done
          schema:
            $ref: '#/definitions/models.Result'
        "400":
          description: Invalid data for save
          schema:
            $ref: '#/definitions/models.Result'
        "401":
          description: Required authorization
          schema:
            $ref: '#/definitions/models.Result'
        "500":
          description: Database error
          schema:
            $ref: '#/definitions/models.Result'
      security:
      - OAuth2Application:
        - write
      summary: Save offline game
      tags:
      - game
  /session:
    delete:
      description: Logout from account and delete auth2 token.
      operationId: Logout
      responses:
        "200":
          description: Get successfully
          schema:
            $ref: '#/definitions/models.Result'
        "500":
          description: Database error
          schema:
            $ref: '#/definitions/models.Result'
      security:
      - OAuth2Application:
        - write
      summary: logout
      tags:
      - account
    post:
      consumes:
      - application/json
      description: Login into account and get auth2 token.
      operationId: Login
      parameters:
      - description: user's name and password
        in: body
        name: information
        required: true
        schema:
          $ref: '#/definitions/models.UserPrivateInfo'
      produces:
      - application/json
      responses:
        "200":
          description: Get successfully
          schema:
            $ref: '#/definitions/models.UserPublicInfo'
        "400":
          description: invalid name or password
          schema:
            $ref: '#/definitions/models.Result'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/models.Result'
        "500":
          description: Database error
          schema:
            $ref: '#/definitions/models.Result'
      summary: login
      tags:
      - account
  /token:
    post:
      consumes:
      - application/json
      description: Get session token for current client
      operationId: tokenHandler
      parameters:
      - default: '"password"'
        description: '''password'' or ''refresh_token'''
        in: body
        name: grant_type
        required: true
        schema:
          type: string
      - default: '"1"'
        description: client id
        in: body
        name: client_id
        required: true
        schema:
          type: string
      - default: '"1"'
        description: client secret
        in: body
        name: client_secret
        required: true
        schema:
          type: string
      - default: '"username"'
        description: username
        in: body
        name: username
        schema:
          type: string
      - default: '"password"'
        description: password
        in: body
        name: password
        schema:
          type: string
      - default: '"1"'
        description: client id
        in: body
        name: refresh_token
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: token was given
          schema:
            $ref: '#/definitions/models.SessionToken'
        "401":
          description: 'invalid body parameters '
          schema:
            $ref: '#/definitions/models.ErrorDescription'
      summary: Get token
      tags:
      - auth
  /user:
    delete:
      consumes:
      - application/json
      description: delete account
      operationId: DeleteAccount
      parameters:
      - description: user's name and password.  You are required to pass in the body
          of the request user name and password to confirm that you are the owner
          of the account.
        in: body
        name: information
        required: true
        schema:
          $ref: '#/definitions/models.UserPrivateInfo'
      produces:
      - application/json
      responses:
        "200":
          description: Delete successfully
          schema:
            $ref: '#/definitions/models.Result'
        "400":
          description: Invalid data for delete
          schema:
            $ref: '#/definitions/models.Result'
        "500":
          description: Database error
          schema:
            $ref: '#/definitions/models.Result'
      summary: delete account
      tags:
      - account
    get:
      consumes:
      - application/json
      description: get user's best score and best time for a given difficulty, user's
        id, name and photo of current user. The current one is the one whose token
        is provided.
      operationId: GetMyProfile
      parameters:
      - default: 0
        description: which difficult records will be given
        in: query
        name: difficult
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Get user successfully
          schema:
            $ref: '#/definitions/models.UserPublicInfo'
        "401":
          description: Authorization required
          schema:
            $ref: '#/definitions/models.Result'
      security:
      - OAuth2Application:
        - read
      summary: get user public information
      tags:
      - account
    post:
      consumes:
      - application/json
      description: create new account and get oauth2 token
      operationId: CreateUser
      parameters:
      - description: user's name and password
        in: body
        name: information
        required: true
        schema:
          $ref: '#/definitions/models.UserPrivateInfo'
      produces:
      - application/json
      responses:
        "201":
          description: Create user successfully
          schema:
            $ref: '#/definitions/models.Result'
        "400":
          description: Invalid information
          schema:
            $ref: '#/definitions/models.Result'
      summary: create new user
      tags:
      - account
    put:
      consumes:
      - application/json
      description: update name or/and password of current user. The current one is
        the one whose token is provided.
      operationId: UpdateProfile
      parameters:
      - description: user's name and password
        in: body
        name: information
        required: true
        schema:
          $ref: '#/definitions/models.UserPrivateInfo'
      produces:
      - application/json
      responses:
        "200":
          description: Update successfully
          schema:
            $ref: '#/definitions/models.Result'
        "400":
          description: Invalid data for update
          schema:
            $ref: '#/definitions/models.Result'
        "401":
          description: Authorization required
          schema:
            $ref: '#/definitions/models.Result'
        "500":
          description: Database error
          schema:
            $ref: '#/definitions/models.Result'
      security:
      - OAuth2Application:
        - write
      summary: update user sensitive data
      tags:
      - account
  /users/{id}:
    get:
      consumes:
      - application/json
      description: get user's best score and best time for a given difficulty, user's
        id, name and photo of current user. The current one is the one whose token
        is provided.
      operationId: getProfile
      parameters:
      - description: user's id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Get user successfully
          schema:
            $ref: '#/definitions/models.UserPublicInfo'
        "400":
          description: Wrong input data
          schema:
            $ref: '#/definitions/models.Result'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/models.Result'
      summary: get user public information
      tags:
      - users
  /users/pages/{page}:
    get:
      consumes:
      - application/json
      description: Get one page of users with selected size.
      operationId: GetUsers
      parameters:
      - default: 0
        description: the offset of users list
        in: path
        name: page
        required: true
        type: integer
      - default: 0
        description: the limit of users page
        in: query
        name: per_page
        required: true
        type: integer
      - default: 0
        description: which difficult records will be given
        in: query
        name: difficult
        type: integer
      - default: '"time"'
        description: sort list by 'score' or by 'time'
        in: query
        name: sort
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Get successfully
          schema:
            items:
              $ref: '#/definitions/models.UserPublicInfo'
            type: array
        "400":
          description: Invalid pade
          schema:
            $ref: '#/definitions/models.Result'
        "404":
          description: Users not found
          schema:
            $ref: '#/definitions/models.Result'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/models.Result'
      summary: Get users list
      tags:
      - users
  /users/pages/amount:
    get:
      consumes:
      - application/json
      description: You pass how many users should be placed on one page, and in return
        you get how many pages with users you can get.
      operationId: GetUsersPageAmount
      parameters:
      - description: number of users in one page
        in: query
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Get successfully
          schema:
            $ref: '#/definitions/models.Pages'
        "400":
          description: Invalid path parameter
          schema:
            $ref: '#/definitions/models.Result'
        "500":
          description: Database error
          schema:
            $ref: '#/definitions/models.Result'
      summary: get number of pages with users
      tags:
      - users
securityDefinitions:
  OAuth2Password:
    flow: password
    scopes:
      admin: ' Grants read and write access to administrative information'
      read: ' Grants read access'
      write: ' Grants write access'
    tokenUrl: https://localhost:3003/auth/token
    type: oauth2
swagger: "2.0"
